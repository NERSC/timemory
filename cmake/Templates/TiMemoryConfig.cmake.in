
include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@ConfigVersion.cmake)

@PACKAGE_INIT@

#------------------------------------------------------------------------------#
#   Settings
#------------------------------------------------------------------------------#
set(TIMEMORY_PYTHON_BINDINGS @TIMEMORY_BUILD_PYTHON@)
if(NOT DEFINED @PROJECT_NAME@_DIR)
    set(@PROJECT_NAME@_DIR ${CMAKE_CURRENT_LIST_DIR})
endif(NOT DEFINED @PROJECT_NAME@_DIR)
set(TIMEMORY_C_LIBRARY @TIMEMORY_BUILD_C@)

# compile options
set(@PROJECT_NAME@_C_COMPILE_OPTIONS @PROJECT_C_COMPILE_OPTIONS@)
set(@PROJECT_NAME@_CXX_COMPILE_OPTIONS @PROJECT_CXX_COMPILE_OPTIONS@)
set(@PROJECT_NAME@_CUDA_COMPILE_OPTIONS @PROJECT_CUDA_COMPILE_OPTIONS@)
set(@PROJECT_NAME@_BUILD_TYPE @CMAKE_BUILD_TYPE@)

# link options
set(@PROJECT_NAME@_C_LINK_OPTIONS @PROJECT_C_LINK_OPTIONS@)
set(@PROJECT_NAME@_CXX_LINK_OPTIONS @PROJECT_CXX_LINK_OPTIONS@)
set(@PROJECT_NAME@_CUDA_LINK_OPTIONS @PROJECT_CUDA_LINK_OPTIONS@)

# installed and interface libraries
set(@PROJECT_NAME@_INSTALLED_LIBRARIES @INSTALL_LIBRARIES@)
set(@PROJECT_NAME@_INTERFACE_LIBRARIES @INTERFACE_LIBRARIES@)

# language standards
set(CMAKE_C_STANDARD @CMAKE_C_STANDARD@ CACHE STRING "")
set(CMAKE_CXX_STANDARD @CMAKE_CXX_STANDARD@ CACHE STRING "")
set(CMAKE_CUDA_STANDARD @CMAKE_CUDA_STANDARD@ CACHE STRING "")

# language standard required
set(CMAKE_C_STANDARD_REQUIRED @CMAKE_C_STANDARD_REQUIRED@ CACHE BOOL "")
set(CMAKE_CXX_STANDARD_REQUIRED @CMAKE_CXX_STANDARD_REQUIRED@ CACHE BOOL "")
set(CMAKE_CUDA_STANDARD_REQUIRED @CMAKE_CUDA_STANDARD_REQUIRED@ CACHE BOOL "")

# language extensions
set(CMAKE_C_EXTENSIONS @CMAKE_C_EXTENSIONS@ CACHE BOOL "")
set(CMAKE_CXX_EXTENSIONS @CMAKE_CXX_EXTENSIONS@ CACHE BOOL "")
set(CMAKE_CUDA_EXTENSIONS @CMAKE_CUDA_EXTENSIONS@ CACHE BOOL "")

#------------------------------------------------------------------------------#
#   Determine install tree or build tree
#------------------------------------------------------------------------------#
set(_TIMEMORY_INSTALL_TREE ON)
if("${CMAKE_SOURCE_DIR}" STREQUAL "@CMAKE_SOURCE_DIR@")
    set(_TIMEMORY_INSTALL_TREE OFF) # build tree
endif()

if(_TIMEMORY_INSTALL_TREE)

    set_and_check(@PROJECT_NAME@_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
    set_and_check(@PROJECT_NAME@_LIB_DIR "@PACKAGE_LIB_INSTALL_DIR@")
    get_filename_component(@PROJECT_NAME@_ROOT_DIR ${@PROJECT_NAME@_INCLUDE_DIR} PATH)

    if(@TIMEMORY_BUILD_PYTHON@)
        set(@PROJECT_NAME@_PYTHON_DIR "@PACKAGE_PYTHON_INSTALL_DIR@")
        if(NOT EXISTS ${@PROJECT_NAME@_PYTHON_DIR})
            find_package(PythonInterp QUIET)
            if(PYTHONINTERP_FOUND)
                execute_process(COMMAND
                    ${PYTHON_EXECUTABLE} -c "import site; print(site.getsitepackages()[0])"
                    OUTPUT_VARIABLE @PROJECT_NAME@_PYTHON_DIR
                    OUTPUT_STRIP_TRAILING_WHITESPACE
                    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})
            endif()
        endif()
    endif()

    foreach(_TYPE LIB INCLUDE PYTHON)
        set(@PROJECT_NAME@_${_TYPE}_DIRS ${@PROJECT_NAME@_${_TYPE}_DIR})
    endforeach()

    include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@LibraryDepends.cmake)
    check_required_components(@PROJECT_NAME@)

    #--------------------------------------------------------------------------#
    #   try to get imported location
    #--------------------------------------------------------------------------#

    set(IMPORTED_LOCATION_BUILD )
    string(TOUPPER "${@PROJECT_NAME@_BUILD_TYPE}" _BUILD_TYPE)
    if("${@PROJECT_NAME@_BUILD_TYPE}" MATCHES "${CMAKE_CONFIGURATION_TYPES}")
        set(IMPORTED_LOCATION_BUILD IMPORTED_LOCATION_${_BUILD_TYPE})
    endif()

    set(LOCATIONS IMPORTED_LOCATION
        ${IMPORTED_LOCATION_BUILD}
        IMPORTED_LOCATION_RELEASE
        IMPORTED_LOCATION_RELWITHDEBINFO
        IMPORTED_LOCATION_DEBUG
        IMPORTED_LOCATION_MINSIZEREL)

    set(_LANGUAGES CXX)
    if(TIMEMORY_C_LIBRARY)
        list(APPEND _LANGUAGES C)
    endif()

    # loop over library types
    foreach(_TYPE shared static)
        # loop over languages
        foreach(_LANG ${_LANGUAGES})
            string(TOLOWER "${_LANG}" _LANG_LOWER)
            # try imported locations until one is found
            foreach(_LOC ${LOCATIONS})
                if(NOT _${_LANG}_LOCATION)
                    get_target_property(_${_LANG}_LOCATION
                        @LIBNAME@-${_LANG_LOWER}-library-${_TYPE} ${_LOC})
                endif()
            endforeach()

            if(_${_LANG}_LOCATION)
                set(@PROJECT_NAME@_${_LANG}_LIBRARY ${_${_LANG}_LOCATION}
                    CACHE INTERNAL "@PROJECT_NAME@ ${_LANG} library")
            endif()

            unset(_${_LANG}_LOCATION)

            if("${_TYPE}" STREQUAL "static" AND WIN32)
                target_compile_definitions(@LIBNAME@-${_LANG_LOWER}-library-${_TYPE} PUBLIC
                    _TIMEMORY_ARCHIVE)
            endif()
        endforeach()
    endforeach()

else() # build tree

    set(@PROJECT_NAME@_ROOT_DIR "@PROJECT_BINARY_DIR@")

    if(TIMEMORY_PYTHON_BINDINGS)
        list(APPEND @PROJECT_NAME@_INCLUDE_DIR "${RELATIVE_SOURCE_DIR}/source/python/pybind11")
    endif()

    set(@PROJECT_NAME@_LIB_DIR "@PROJECT_BINARY_DIR@")

    if(TIMEMORY_PYTHON_BINDINGS)
        set(@PROJECT_NAME@_PYTHON_DIR "@PROJECT_BINARY_DIR@")
    endif()

    MACRO(IMPORT_LIB _LIB _IMPORT_TYPE)
        set_property(TARGET ${_LIB} PROPERTY ${_IMPORT_TYPE}
            "${CMAKE_BINARY_DIR}/TiMemoryBuild.cmake")
    ENDMACRO()

    foreach(_LIB ${@PROJECT_NAME@_INTERFACE_LIBRARIES})
        import_lib(${_LIB} INTERFACE_IMPORTED_LOCATION)
    endforeach()

    list(REMOVE_ITEM @PROJECT_NAME@_INSTALLED_LIBRARIES ${@PROJECT_NAME@_INTERFACE_LIBRARIES})

    foreach(_LIB ${@PROJECT_NAME@_INSTALLED_LIBRARIES})
        import_lib(${_LIB} IMPORTED_LOCATION)
    endforeach()

    if(WIN32)
        target_compile_definitions(@LIBNAME@-cxx-library-static PUBLIC _TIMEMORY_ARCHIVE)
        if(TIMEMORY_C_LIBRARY)
            target_compile_definitions(@LIBNAME@-c-library-static PUBLIC _TIMEMORY_ARCHIVE)
        endif()
    endif()

endif()


#------------------------------------------------------------------------------#
#   include directories
#------------------------------------------------------------------------------#
set(@PROJECT_NAME@_INCLUDE_DIRS ${@PROJECT_NAME@_INCLUDE_DIR})
set(@PROJECT_NAME@_EXTERNAL_INCLUDE_DIRS "@EXTERNAL_INCLUDE_DIRS@")

foreach(_DIR ${@PROJECT_NAME@_EXTERNAL_INCLUDE_DIRS})
    list(APPEND @PROJECT_NAME@_INCLUDE_DIRS ${_DIR})
endforeach()


#------------------------------------------------------------------------------#
#   TiMemory link target
#------------------------------------------------------------------------------#
set(@PROJECT_NAME@_CXX_LIBRARIES @LIBNAME@-cxx-library)
set(@PROJECT_NAME@_LIBRARIES @LIBNAME@-cxx-library)
if(TIMEMORY_C_LIBRARY)
    set(@PROJECT_NAME@_C_LIBRARIES @LIBNAME@-c-library)
    list(APPEND @PROJECT_NAME@_LIBRARIES @LIBNAME@-c-library)
endif()


#------------------------------------------------------------------------------#
#   find_package variables
#------------------------------------------------------------------------------#
include(FindPackageHandleStandardArgs)
# handle the QUIETLY and REQUIRED arguments and set TiMemory_FOUND to TRUE
# if all listed variables are TRUE
find_package_handle_standard_args(@PROJECT_NAME@ DEFAULT_MSG
    @PROJECT_NAME@_ROOT_DIR
    @PROJECT_NAME@_LIBRARIES)

if(APPLE)
    set(CMAKE_INCLUDE_SYSTEM_FLAG_${LANG} "-isystem ")
endif(APPLE)
