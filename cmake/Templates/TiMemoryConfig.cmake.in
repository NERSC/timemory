
cmake_policy(SET CMP0057 NEW)

include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@ConfigVersion.cmake)

@PACKAGE_INIT@

#------------------------------------------------------------------------------#
#   Settings
#------------------------------------------------------------------------------#
set(TIMEMORY_PYTHON_BINDINGS @TIMEMORY_BUILD_PYTHON@)
if(NOT DEFINED @PROJECT_NAME@_DIR)
    set(@PROJECT_NAME@_DIR ${CMAKE_CURRENT_LIST_DIR})
endif(NOT DEFINED @PROJECT_NAME@_DIR)
set(TIMEMORY_C_LIBRARY @TIMEMORY_BUILD_C@)
set(TIMEMORY_CUDA_LIBRARY OFF)
if(@TIMEMORY_USE_CUPTI@ AND @TIMEMORY_USE_CUDA@)
    set(TIMEMORY_CUDA_LIBRARY ON)
endif()

# compile options
set(@PROJECT_NAME@_C_COMPILE_OPTIONS @PROJECT_C_COMPILE_OPTIONS@)
set(@PROJECT_NAME@_CXX_COMPILE_OPTIONS @PROJECT_CXX_COMPILE_OPTIONS@)
set(@PROJECT_NAME@_CUDA_COMPILE_OPTIONS @PROJECT_CUDA_COMPILE_OPTIONS@)
set(@PROJECT_NAME@_BUILD_TYPE @CMAKE_BUILD_TYPE@)

# installed and interface libraries
set(@PROJECT_NAME@_INSTALLED_LIBRARIES @INSTALL_LIBRARIES@)
set(@PROJECT_NAME@_INTERFACE_LIBRARIES @INTERFACE_LIBRARIES@)

# language standards
set(CMAKE_C_STANDARD @CMAKE_C_STANDARD@ CACHE STRING "")
set(CMAKE_CXX_STANDARD @CMAKE_CXX_STANDARD@ CACHE STRING "")
set(CMAKE_CUDA_STANDARD @CMAKE_CUDA_STANDARD@ CACHE STRING "")

# language standard required
set(CMAKE_C_STANDARD_REQUIRED @CMAKE_C_STANDARD_REQUIRED@ CACHE BOOL "")
set(CMAKE_CXX_STANDARD_REQUIRED @CMAKE_CXX_STANDARD_REQUIRED@ CACHE BOOL "")
set(CMAKE_CUDA_STANDARD_REQUIRED @CMAKE_CUDA_STANDARD_REQUIRED@ CACHE BOOL "")

# language extensions
set(CMAKE_C_EXTENSIONS @CMAKE_C_EXTENSIONS@ CACHE BOOL "")
set(CMAKE_CXX_EXTENSIONS @CMAKE_CXX_EXTENSIONS@ CACHE BOOL "")
set(CMAKE_CUDA_EXTENSIONS @CMAKE_CUDA_EXTENSIONS@ CACHE BOOL "")

# languages
set(TIMEMORY_LANGUAGES CXX)

if(TIMEMORY_C_LIBRARY)
    list(APPEND TIMEMORY_LANGUAGES C)
endif()

if(TIMEMORY_CUDA_LIBRARY)
    list(APPEND TIMEMORY_LANGUAGES CUDA)
endif()

#------------------------------------------------------------------------------#
#   Determine install tree or build tree
#------------------------------------------------------------------------------#
set(TIMEMORY_INSTALL_TREE ON)
if("${CMAKE_SOURCE_DIR}" STREQUAL "@CMAKE_SOURCE_DIR@")
    set(TIMEMORY_INSTALL_TREE OFF) # build tree
endif()

if(TIMEMORY_INSTALL_TREE)

    set_and_check(@PROJECT_NAME@_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
    set_and_check(@PROJECT_NAME@_LIB_DIR "@PACKAGE_LIB_INSTALL_DIR@")
    get_filename_component(@PROJECT_NAME@_ROOT_DIR ${@PROJECT_NAME@_INCLUDE_DIR} PATH)

    if(@TIMEMORY_BUILD_PYTHON@)
        set(@PROJECT_NAME@_PYTHON_DIR "@PACKAGE_PYTHON_INSTALL_DIR@")
        if(NOT EXISTS ${@PROJECT_NAME@_PYTHON_DIR})
            find_package(PythonInterp QUIET)
            if(PYTHONINTERP_FOUND)
                execute_process(COMMAND
                    ${PYTHON_EXECUTABLE} -c "import site; print(site.getsitepackages()[0])"
                    OUTPUT_VARIABLE @PROJECT_NAME@_PYTHON_DIR
                    OUTPUT_STRIP_TRAILING_WHITESPACE
                    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})
            endif()
        endif()
    endif()

    foreach(_TYPE LIB INCLUDE PYTHON)
        set(@PROJECT_NAME@_${_TYPE}_DIRS ${@PROJECT_NAME@_${_TYPE}_DIR})
    endforeach()

    include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@LibraryDepends.cmake)
    check_required_components(@PROJECT_NAME@)

    #--------------------------------------------------------------------------#
    #   try to get imported location
    #--------------------------------------------------------------------------#

    set(IMPORTED_LOCATION_BUILD )
    string(TOUPPER "${@PROJECT_NAME@_BUILD_TYPE}" _BUILD_TYPE)
    if("${@PROJECT_NAME@_BUILD_TYPE}" MATCHES "${CMAKE_CONFIGURATION_TYPES}")
        set(IMPORTED_LOCATION_BUILD IMPORTED_LOCATION_${_BUILD_TYPE})
    endif()

    set(LOCATIONS IMPORTED_LOCATION
        ${IMPORTED_LOCATION_BUILD}
        IMPORTED_LOCATION_RELEASE
        IMPORTED_LOCATION_RELWITHDEBINFO
        IMPORTED_LOCATION_DEBUG
        IMPORTED_LOCATION_MINSIZEREL)

    # loop over library types
    foreach(_TYPE shared static)
        # loop over languages
        foreach(_LANG ${TIMEMORY_LANGUAGES})
            string(TOLOWER "${_LANG}" _LANG_LOWER)
            # try imported locations until one is found
            foreach(_LOC ${LOCATIONS})
                if(NOT _${_LANG}_LOCATION)
                    get_target_property(_${_LANG}_LOCATION
                        @LIBNAME@-${_LANG_LOWER}-library-${_TYPE} ${_LOC})
                endif()
            endforeach()

            if(_${_LANG}_LOCATION)
                set(@PROJECT_NAME@_${_LANG}_LIBRARY ${_${_LANG}_LOCATION}
                    CACHE INTERNAL "@PROJECT_NAME@ ${_LANG} library")
            endif()

            unset(_${_LANG}_LOCATION)

            if("${_TYPE}" STREQUAL "static" AND WIN32)
                target_compile_definitions(@LIBNAME@-${_LANG_LOWER}-library-${_TYPE} PUBLIC
                    _TIMEMORY_ARCHIVE)
            endif()
        endforeach()
    endforeach()

else() # build tree

    set(@PROJECT_NAME@_ROOT_DIR "@PROJECT_BINARY_DIR@")

    set(@PROJECT_NAME@_LIB_DIR "@PROJECT_BINARY_DIR@")

    if(@TIMEMORY_BUILD_PYTHON@)
        set(@PROJECT_NAME@_PYTHON_DIR "@PROJECT_BINARY_DIR@")
    endif()

    MACRO(IMPORT_LIB _LIB _IMPORT_TYPE)
        set_property(TARGET ${_LIB} PROPERTY ${_IMPORT_TYPE}
            "${CMAKE_BINARY_DIR}/TiMemoryBuild.cmake")
    ENDMACRO()

    foreach(_LIB ${@PROJECT_NAME@_INTERFACE_LIBRARIES})
        import_lib(${_LIB} INTERFACE_IMPORTED_LOCATION)
    endforeach()

    list(REMOVE_ITEM @PROJECT_NAME@_INSTALLED_LIBRARIES ${@PROJECT_NAME@_INTERFACE_LIBRARIES})

    foreach(_LIB ${@PROJECT_NAME@_INSTALLED_LIBRARIES})
        import_lib(${_LIB} IMPORTED_LOCATION)
    endforeach()

    if(WIN32)
        target_compile_definitions(@LIBNAME@-cxx-library-static PUBLIC _TIMEMORY_ARCHIVE)
        if(TIMEMORY_C_LIBRARY)
            target_compile_definitions(@LIBNAME@-c-library-static PUBLIC _TIMEMORY_ARCHIVE)
        endif()
    endif()

    if(TIMEMORY_CUDA_LIBRARY)
        set_property(TARGET @LIBNAME@-cuda-library
            PROPERTY IMPORTED_LOCATION "${CMAKE_BINARY_DIR}/TiMemoryBuild.cmake")
        list(APPEND PROJECT_DEPENDS @LIBNAME@-cuda-library)
    endif()

    if(TIMEMORY_CUDA_LIBRARY)
        set_property(TARGET @LIBNAME@-cuda-library
            PROPERTY IMPORTED_LOCATION "${CMAKE_BINARY_DIR}/TiMemoryBuild.cmake")
        list(APPEND PROJECT_DEPENDS @LIBNAME@-cuda-library)
    endif()

endif()


#------------------------------------------------------------------------------#
#   Interface
#------------------------------------------------------------------------------#
foreach(_LANG ${TIMEMORY_LANGUAGES})
    string(TOLOWER "${_LANG}" _LANG_LOWER)
    # timemory-{c,cxx,cuda}-library --> TiMemory::TiMemory_{C,CXX,CUDA}
    add_library(@PROJECT_NAME@::@PROJECT_NAME@_${_LANG} ALIAS @LIBNAME@-${_LANG_LOWER}-library)
    if(NOT "${_LANG}" STREQUAL "CUDA")
        # timemory-{c,cxx}-library --> TiMemory::TiMemory_{C,CXX}::shared
        add_library(@PROJECT_NAME@::@PROJECT_NAME@_${_LANG}::shared ALIAS @LIBNAME@-${_LANG_LOWER}-library)
        # timemory-{c,cxx}-library-static --> TiMemory::TiMemory_{C,CXX}::static
        add_library(@PROJECT_NAME@::@PROJECT_NAME@_${_LANG}::static ALIAS @LIBNAME@-${_LANG_LOWER}-library-static)
    else()
        # timemory-cuda-library
        add_library(@PROJECT_NAME@::@PROJECT_NAME@_${_LANG}::static ALIAS @LIBNAME@-${_LANG_LOWER}-library)
    endif()
    unset(_LANG_LOWER)
endforeach()


#------------------------------------------------------------------------------#
#   Alias target
#------------------------------------------------------------------------------#
if(DYNAMIC_LINK)
    if(NOT TARGET @LIBNAME@-c-library-shared)
        add_library(@LIBNAME@-c-library-shared ALIAS @LIBNAME@-c-library)
    endif()
    if(NOT TARGET @LIBNAME@-cxx-library-shared)
        add_library(@LIBNAME@-cxx-library-shared ALIAS @LIBNAME@-cxx-library)
    endif()
    if(NOT TARGET @LIBNAME@-cuda-library-static)
        add_library(@LIBNAME@-cuda-library-static ALIAS @LIBNAME@-cuda-library)
    endif()
endif()


#------------------------------------------------------------------------------#
#   Interface
#------------------------------------------------------------------------------#
foreach(_LANG ${TIMEMORY_LANGUAGES})
    string(TOLOWER "${_LANG}" _LANG_LOWER)
    # timemory-{c,cxx,cuda}-library --> TiMemory::TiMemory_{C,CXX,CUDA}
    add_library(@PROJECT_NAME@::@PROJECT_NAME@_${_LANG} ALIAS @LIBNAME@-${_LANG_LOWER}-library)
    if(NOT "${_LANG}" STREQUAL "CUDA")
        if(DYNAMIC_LINK)
            # timemory-{c,cxx}-library --> TiMemory::TiMemory_{C,CXX}::shared
            add_library(@PROJECT_NAME@::@PROJECT_NAME@_${_LANG}::shared ALIAS @LIBNAME@-${_LANG_LOWER}-library)
        endif()
        # timemory-{c,cxx}-library-static --> TiMemory::TiMemory_{C,CXX}::static
        add_library(@PROJECT_NAME@::@PROJECT_NAME@_${_LANG}::static ALIAS @LIBNAME@-${_LANG_LOWER}-library-static)
    else()
        # timemory-cuda-library
        add_library(@PROJECT_NAME@::@PROJECT_NAME@_${_LANG}::static ALIAS @LIBNAME@-${_LANG_LOWER}-library)
    endif()
    unset(_LANG_LOWER)
endforeach()


#------------------------------------------------------------------------------#
#   Definitions
#------------------------------------------------------------------------------#
if(WIN32)
    target_compile_definitions(@LIBNAME@-cxx-library-static INTERFACE _TIMEMORY_ARCHIVE)
    if(TIMEMORY_C_LIBRARY)
        target_compile_definitions(@LIBNAME@-c-library-static INTERFACE _TIMEMORY_ARCHIVE)
    endif()
endif()


#------------------------------------------------------------------------------#
#   TiMemory link target
#------------------------------------------------------------------------------#
set(@PROJECT_NAME@_CXX_LIBRARIES @LIBNAME@-cxx-library)
set(@PROJECT_NAME@_LIBRARIES @LIBNAME@-cxx-library)
if(TIMEMORY_C_LIBRARY)
    set(@PROJECT_NAME@_C_LIBRARIES @LIBNAME@-c-library)
    list(APPEND @PROJECT_NAME@_LIBRARIES @LIBNAME@-c-library)
endif()


#------------------------------------------------------------------------------#
#   components for install tree
#------------------------------------------------------------------------------#
if(TIMEMORY_INSTALL_TREE)
    set(@PROJECT_NAME@_COMPONENTS @INSTALL_LIBRARIES@ @INTERFACE_LIBRARIES@)
endif()


#------------------------------------------------------------------------------#
#   timemory component interface library
#------------------------------------------------------------------------------#
set(_@PROJECT_NAME@_MISSING_COMPONENTS )
set(@PROJECT_NAME@_FOUND_COMPONENTS ${@PROJECT_NAME@_FIND_COMPONENTS})

set(_INTERFACE_LIB @LIBNAME@)
if(@PROJECT_NAME@_FIND_COMPONENTS_INTERFACE)
    set(_INTERFACE_LIB ${@PROJECT_NAME@_FIND_COMPONENTS_INTERFACE})
endif()

add_library(${_INTERFACE_LIB} INTERFACE IMPORTED)

if(NOT "${@PROJECT_NAME@_FIND_COMPONENTS}" STREQUAL "")

    set(_LINK )
    set(_LANGUAGES )
    set(_COMPONENT_LIST )

    # always add headers
    list(APPEND @PROJECT_NAME@_FIND_COMPONENTS headers)

    # determine link type
    if("shared" IN_LIST @PROJECT_NAME@_FIND_COMPONENTS)
        set(_LINK shared)
        list(REMOVE_ITEM @PROJECT_NAME@_FIND_COMPONENTS shared)
        list(REMOVE_ITEM @PROJECT_NAME@_FOUND_COMPONENTS shared)
    elseif("static" IN_LIST @PROJECT_NAME@_FIND_COMPONENTS)
        set(_LINK static)
        list(REMOVE_ITEM @PROJECT_NAME@_FIND_COMPONENTS static)
        list(REMOVE_ITEM @PROJECT_NAME@_FOUND_COMPONENTS static)
    else()
        if(BUILD_SHARED_LIBS)
            set(_LINK shared)
        else()
            set(_LINK static)
        endif()
    endif()

    # find languages
    foreach(_LANGUAGE c cxx cuda)
        if("${_LANGUAGE}" IN_LIST @PROJECT_NAME@_FIND_COMPONENTS)
            list(APPEND _LANGUAGES ${_LANGUAGE})
            list(REMOVE_ITEM @PROJECT_NAME@_FIND_COMPONENTS ${_LANGUAGE})
            list(REMOVE_ITEM @PROJECT_NAME@_FOUND_COMPONENTS ${_LANGUAGE})
        endif()
    endforeach()

    # helper macro
    macro(@PROJECT_NAME@_LINK_TARGET_IF_EXISTS _TARGET)
        if("${_TARGET}" IN_LIST @PROJECT_NAME@_FIND_COMPONENTS OR TARGET ${_TARGET})
            if(TARGET ${_TARGET})
                target_link_libraries(${_INTERFACE_LIB} INTERFACE ${_TARGET})
                list(APPEND @PROJECT_NAME@_FOUND_COMPONENTS ${_TARGET})
            else()
                list(REMOVE_ITEM @PROJECT_NAME@_FOUND_COMPONENTS ${_TARGET})
                list(APPEND _@PROJECT_NAME@_MISSING_COMPONENTS ${_TARGET})
            endif()

            if("${_TARGET}" IN_LIST @PROJECT_NAME@_FIND_COMPONENTS)
                list(REMOVE_ITEM @PROJECT_NAME@_FIND_COMPONENTS ${_TARGET})
            endif()

            foreach(_ARG ${ARGN})
                if("${_ARG}" IN_LIST @PROJECT_NAME@_FIND_COMPONENTS)
                    list(REMOVE_ITEM @PROJECT_NAME@_FIND_COMPONENTS ${_ARG})
                endif()
                list(REMOVE_ITEM @PROJECT_NAME@_FOUND_COMPONENTS ${_ARG})
            endforeach()
        else()
            message(WARNING "Target ${_TARGET} not found!")
            list(REMOVE_ITEM @PROJECT_NAME@_FOUND_COMPONENTS ${_TARGET})
            list(APPEND _@PROJECT_NAME@_MISSING_COMPONENTS ${_TARGET})
        endif()
    endmacro()

    if("extern-templates" IN_LIST @PROJECT_NAME@_FIND_COMPONENTS)
        @PROJECT_NAME@_LINK_TARGET_IF_EXISTS(timemory-${_LINK}-extern-templates
            extern-templates ${_LINK}-extern-templates)
    endif()

    foreach(_LANGUAGE ${_LANGUAGES})
        if("${_LANGUAGE}" STREQUAL "cuda")
            @PROJECT_NAME@_LINK_TARGET_IF_EXISTS(timemory-${_LANGUAGE})
        else()
            @PROJECT_NAME@_LINK_TARGET_IF_EXISTS(timemory-${_LANGUAGE}-library-${_LINK})
            @PROJECT_NAME@_LINK_TARGET_IF_EXISTS(timemory-${_LANGUAGE}-compile-options compile-options)
        endif()
    endforeach()

    foreach(_COMPONENT ${@PROJECT_NAME@_FIND_COMPONENTS})
        @PROJECT_NAME@_LINK_TARGET_IF_EXISTS(timemory-${_COMPONENT} ${_COMPONENT})
    endforeach()

    if(NOT "${@PROJECT_NAME@_FOUND_COMPONENTS}" STREQUAL "")
        list(REMOVE_DUPLICATES @PROJECT_NAME@_FOUND_COMPONENTS)
    endif()
    list(SORT @PROJECT_NAME@_FOUND_COMPONENTS)
    set(_COMPONENT_LIST ${@PROJECT_NAME@_FOUND_COMPONENTS})
    string(REPLACE ";" ", " _COMPONENT_LIST "${_COMPONENT_LIST}")
    message(STATUS "[${PROJECT_NAME}] @PROJECT_NAME@ found components: ${_COMPONENT_LIST}")

    unset(_COMPONENT_LIST)
    unset(_LINK)
    unset(_LANGUAGES)
endif()


#------------------------------------------------------------------------------#
#   find_package variables
#------------------------------------------------------------------------------#
include(FindPackageHandleStandardArgs)
# handle the QUIETLY and REQUIRED arguments and set TiMemory_FOUND to TRUE
# if all listed variables are TRUE
find_package_handle_standard_args(@PROJECT_NAME@ DEFAULT_MSG
    @PROJECT_NAME@_ROOT_DIR
    ${@PROJECT_NAME@_COMPONENTS}
    ${_@PROJECT_NAME@_MISSING_COMPONENTS}
    @PROJECT_NAME@_LIBRARIES)

if(APPLE)
    set(CMAKE_INCLUDE_SYSTEM_FLAG_${LANG} "-isystem ")
endif(APPLE)

unset(TIMEMORY_INSTALL_TREE)
