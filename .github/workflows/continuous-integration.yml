name: continuous-integration
on: [push, pull_request]

jobs:
  maeve-ci:
    continue-on-error: false
    strategy:
      max-parallel: 2
      fail-fast: true
      matrix:
        include:
          - build_type: 'Debug'
            compiler: 'gcc-7'
            standard: '17'
            tools: 'dyninst mpip ncclp mallocp kokkos'
            extra_args: '--coverage --minimal'
            extra_cmake: ''
        # compiler: ['gcc-6', 'gcc-7', 'gcc-8', 'gcc-9', 'gcc-10', 'clang-6.0', 'clang-7', 'clang-8', 'clang-9', 'clang-10', 'clang-11', 'clang-12']
        build_type: ['Release']
        compiler: ['gcc-9', 'clang-10', 'gcc-10', 'clang-11', 'clang-12']
        standard: ['17']
        tools: ['avail kokkos kokkos-config dyninst mpip ncclp mallocp compiler']
        extra_args: ['--python']
        extra_cmake: ['-G Ninja']
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true
          clean: true
      - name: Build and Test
        run: |
          export CONTINUOUS_INTEGRATION=true
          export CUDA_VISIBLE_DEVICES=2
          git submodule update .
          module load anaconda
          module load likwid
          if [ -n "$(echo ${{ matrix.compiler }} | grep 'clang-12')" ]; then module load cuda/10.0; CUDA_CLANG=1; else module load cuda; CUDA_CLANG=0; fi
          module list
          spack env activate timemory-ci
          spack load dyninst boost
          source activate
          conda activate timemory
          echo "python: $(which python)"
          env
          if [ -z "$(echo ${LD_LIBRARY_PATH} | grep timemory-ci)" ]; then echo "Warning: incorrect LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}"; fi
          BASE_ARGS="--papi --likwid --mpi --cuda --cupti --gotcha --caliper --extra-optimizations --tools ${{ matrix.tools }} -SF --pyctest-model=Continuous -j 6"
          CTEST_ARGS="-V"
          CMAKE_ARGS="-DCMAKE_INSTALL_PREFIX=${PWD}/install-timemory -DTIMEMORY_KOKKOS_BUILD_SAMPLE=ON -DTIMEMORY_BUILD_CALIPER=OFF -DTIMEMORY_BUILD_GOTCHA=OFF ${{ matrix.extra_cmake }}"
          export CC=${{ matrix.compiler }}
          export CXX="$(echo '${{ matrix.compiler }}' | sed 's/gcc/g++/1' | sed 's/clang/clang++/1')"
          if [ "${CUDA_CLANG}" -eq 1 ]; then export CUDACXX=${CXX}; fi
          python ./pyctest-runner.py --cxx-standard=${{ matrix.standard }} --pyctest-build-type=${{ matrix.build_type }} ${{ matrix.extra_args }} ${BASE_ARGS} -- ${CTEST_ARGS} -- ${CMAKE_ARGS}
          cmake --build build-timemory/Linux --target all --parallel 6
