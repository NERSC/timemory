version: 2.0.{build}

skip_commits:
  files:
    - docs/*
    - .github/*
    - scripts/*
    - recipe/*
    - spack/*
    - docker/*
    - '**/*.md'
    - pyproject.toml
    - pytest.ini
    - requirements.txt
    - setup.*
    - VERSION

skip_tags: true
skip_branch_with_pr: true
max_jobs: 2

image:
  - Visual Studio 2019

test: on

build:
  parallel: true

platform:
  - x64

environment:
  CONTINUOUS_INTEGRATION: "true"
  matrix:
    - CONDA: 38
      CPP: 17
      CONFIG: Release
      EXAMPLES: "OFF"
      TOOLS: "OFF"
      WINSOCK: "OFF"
      USE_ARCH: "OFF"
      USE_PYTHON: "ON"
      BUILD_C: "ON"
      BUILD_SHARED: "ON"
      BUILD_STATIC: "OFF"
      BUILD_TESTING: "ON"
      LINE_PROFILER: "OFF"
      HATCHET: "OFF"
    - CONDA: 37
      CPP: 14
      CONFIG: RelWithDebInfo
      EXAMPLES: "OFF"
      TOOLS: "OFF"
      WINSOCK: "OFF"
      USE_ARCH: "OFF"
      USE_PYTHON: "ON"
      BUILD_C: "OFF"
      BUILD_SHARED: "ON"
      BUILD_STATIC: "ON"
      BUILD_TESTING: "OFF"
      LINE_PROFILER: "OFF"
      HATCHET: "OFF"
    - PYTHON: 36
      CPP: 14
      CONFIG: Debug
      EXAMPLES: "ON"
      TOOLS: "OFF"
      WINSOCK: "OFF"
      USE_ARCH: "OFF"
      USE_PYTHON: "ON"
      BUILD_C: "ON"
      BUILD_SHARED: "ON"
      BUILD_STATIC: "OFF"
      BUILD_TESTING: "OFF"
      LINE_PROFILER: "OFF"
      HATCHET: "OFF"
    - PYTHON: 37
      CPP: 17
      CONFIG: MinSizeRel
      EXAMPLES: "OFF"
      TOOLS: "ON"
      WINSOCK: "OFF"
      USE_ARCH: "OFF"
      USE_PYTHON: "ON"
      BUILD_C: "OFF"
      BUILD_SHARED: "OFF"
      BUILD_STATIC: "ON"
      BUILD_TESTING: "OFF"
      LINE_PROFILER: "OFF"
      HATCHET: "OFF"

install:
  # Configure environment
  - ps: |
      # CMake architecture
      if ($env:PLATFORM -eq "x64") {
        $env:CMAKE_GENERATOR_PLATFORM = "x64"
      }

      # CMake generator
      if ($env:APPVEYOR_JOB_NAME -like "*Visual Studio 2017*") {
        $env:CMAKE_GENERATOR = "Visual Studio 15 2017"
      } else {
        $env:CMAKE_GENERATOR = "Visual Studio 16 2019"
      }

      # Python environment
      if ($env:PYTHON) {
        $env:BUILD_NAME = "MSVC-2019-CXX$env:CPP-PY$env:PYTHON"
        if ($env:PLATFORM -eq "x64") {
          $env:PATH = "C:\Python$env:PYTHON-x64;C:\Python$env:PYTHON-x64\Scripts;C:\Users\appveyor\AppData\Roaming\Python\Python$env:PYTHON\Scripts;$env:PATH"
          $env:CMAKE_PREFIX_PATH = "C:\Python$env:PYTHON-x64;C:\Python$env:PYTHON-x64\Scripts"
          $env:PYTHON_EXE = "C:\Python$env:PYTHON-x64\python.exe"
        } else {
          $env:PATH = "C:\Python$env:PYTHON;C:\Python$env:PYTHON\Scripts;C:\Users\appveyor\AppData\Roaming\Python\Python$env:PYTHON\Scripts;$env:PATH"
          $env:CMAKE_PREFIX_PATH = "C:\Python$env:PYTHON;C:\Python$env:PYTHON\Scripts"
          $env:PYTHON_EXE = "C:\Python$env:PYTHON\python.exe"
        }
        python -m pip install --disable-pip-version-check --user --upgrade pip wheel
        python -m pip install --user -r .requirements/runtime.txt
      } elseif ($env:CONDA) {
        $env:BUILD_NAME = "MSVC-2019-CXX$env:CPP-CONDA$env:CONDA"
        if ($env:PLATFORM -eq "x64") {
          $env:PATH = "C:\Miniconda$env:CONDA-x64;C:\Miniconda$env:CONDA-x64\Scripts;$env:PATH"
          $env:CMAKE_PREFIX_PATH = "C:\Miniconda$env:CONDA-x64;C:\Miniconda$env:CONDA-x64\Scripts"
          $env:PYTHONHOME = "C:\Miniconda$env:CONDA-x64"
          $env:PYTHON_EXE = "C:\Miniconda$env:CONDA-x64\python.exe"
        } else {
          $env:PATH = "C:\Miniconda$env:CONDA;C:\Miniconda$env:CONDA\Scripts;$env:PATH"
          $env:CMAKE_PREFIX_PATH = "C:\Miniconda$env:CONDA;C:\Miniconda$env:CONDA\Scripts"
          $env:PYTHONHOME = "C:\Miniconda$env:CONDA"
          $env:PYTHON_EXE = "C:\Miniconda$env:CONDA\python.exe"
        }
        conda update -y -q -n base conda
        conda install -y -c conda-forge -c defaults -q -r .requirements/runtime.txt
      }
      $env:TIMEMORY_FILE_OUTPUT = "OFF"
      $env:TIMEMORY_AUTO_OUTPUT = "ON"
      mkdir "C:\Users\appveyor\CTestTemp"
      $env:TEMP = "C:\Users\appveyor\CTestTemp"

build_script:
  - cmake
    -DBUILD_SHARED_LIBS="%BUILD_SHARED%"
    -DBUILD_STATIC_LIBS="%BUILD_STATIC%"
    -DCMAKE_BUILD_TYPE="%CONFIG%"
    -DCMAKE_CXX_STANDARD="%CPP%"
    -DCMAKE_INSTALL_PREFIX="../install-timemory"
    -DPYTHON_EXECUTABLE="%PYTHON_EXE%"
    -DTIMEMORY_USE_MPI=OFF
    -DTIMEMORY_USE_PYTHON="%USE_PYTHON%"
    -DTIMEMORY_USE_ARCH="%USE_ARCH%"
    -DTIMEMORY_BUILD_C="%BUILD_C%"
    -DTIMEMORY_BUILD_TOOLS="%TOOLS%"
    -DTIMEMORY_BUILD_EXAMPLES="%EXAMPLES%"
    -DTIMEMORY_BUILD_TESTING="%BUILD_TESTING%"
    -DTIMEMORY_BUILD_MINIMAL_TESTING="%BUILD_TESTING%"
    -DTIMEMORY_BUILD_GOOGLE_TEST="%BUILD_TESTING%"
    -DTIMEMORY_BUILD_PYTHON_LINE_PROFILER="%LINE_PROFILER%"
    -DTIMEMORY_BUILD_PYTHON_HATCHET="%HATCHET%"
    -DTIMEMORY_USE_WINSOCK="%WINSOCK%"
    -DCMAKE_GENERATOR="%CMAKE_GENERATOR%"
    -DCMAKE_GENERATOR_PLATFORM="%CMAKE_GENERATOR_PLATFORM%"
    -DSITE=AppVeyor
    -DTARGET=INSTALL
    -DBUILD_NAME=%BUILD_NAME%
    -DCMAKE_ARGS="--config %CONFIG%"
    -DCTEST_ARGS="-V --output-on-failure"
    -P cmake\Scripts\timemory-ci.cmake
  - ls
  - cd build-timemory/Windows
  - ps: |
      if ($env:EXAMPLES -eq "ON") {
        iex ".\outputs\runtime\$env:CONFIG\ex_optional_off.exe"
        iex ".\outputs\runtime\$env:CONFIG\ex_cxx_basic.exe"
        iex ".\outputs\runtime\$env:CONFIG\ex_optional_on.exe"
        iex ".\outputs\runtime\$env:CONFIG\ex_cxx_overhead.exe"
        iex ".\outputs\runtime\$env:CONFIG\ex_cxx_tuple.exe"
        if ($env:BUILD_C -eq "ON") {
          iex ".\outputs\runtime\$env:CONFIG\ex_c_minimal.exe"
          iex ".\outputs\runtime\$env:CONFIG\ex_c_minimal_library.exe"
          iex ".\outputs\runtime\$env:CONFIG\ex_c_timing.exe"
        }
      }
  - ps: |
      if ($env:USE_PYTHON -eq "ON") {
        cmake -P tests/test-python-install-import.cmake
      }
