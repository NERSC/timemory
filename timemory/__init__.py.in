#!@PYTHON_EXECUTABLE@
# MIT License
#
# Copyright (c) 2018, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from __future__ import absolute_import
import sys
import os
import imp
import copy
import atexit
import ctypes
import platform
import warnings
import importlib
import traceback
from ctypes.util import find_library

__author__ = "Jonathan Madsen"
__copyright__ = "Copyright 2020, The Regents of the University of California"
__credits__ = ["Jonathan Madsen"]
__license__ = "MIT"
__version__ = "@PROJECT_VERSION@"
__maintainer__ = "Jonathan Madsen"
__email__ = "jrmadsen@lbl.gov"
__status__ = "Development"

# get the path to this directory
this_path = os.path.abspath(os.path.dirname(__file__))


os.environ["PROFILESELECTED"] = "1"
'''
Setting PROFILESELECTED=1 attempts to ensure that when gperftools is linked,
cpu profiler, heap checker, and heap profiler lie dormant until activated.

Other relevant gperftools environment variables:

    HEAPPROFILE=<pre>       -- turns on heap profiling and dumps data using this prefix
    HEAPCHECK=<type>        -- turns on heap checking with strictness 'type'
    CPUPROFILE=<file>       -- turns on cpu profiling and dumps data to this file.
    PROFILESELECTED=1       -- if set, cpu-profiler will only profile regions of code
                               surrounded with ProfilerEnable()/ProfilerDisable().
    CPUPROFILE_FREQUENCY=x  -- how many interrupts/second the cpu-profiler samples.
    PERFTOOLS_VERBOSE=<lvl> -- the higher level, the more messages malloc emits
    MALLOCSTATS=<level>     -- prints memory-use stats at program-exit

See also: https://github.com/gperftools/gperftools

If applications that use timemory + gperftools experience errors during exit w.r.t.
corrupted sizes, set:

    export LD_PRELOAD=/path/to/libmalloc.so

before BEFORE running Python
'''

if os.environ.get("TIMEMORY_CXX_PLOT_MODE", None) is not None:

    from . import mpi_support
    from . import mpi
    from . import roofline
    from .common import *

    __all__ = ['version_info',
               'build_info',
               'version',
               # --------------- modules ---------------#
               'mpi_support',
               'roofline',
               'mpi',
               # --------------- functions -------------#
               'LINE',
               'FUNC',
               'FILE',
               ]
else:

    try:
        from . import libpytimemory
        from . import plotting
        from . import roofline
        from . import mpi_support
        from . import mpi
        from . import util
        from . import bundle
        from . import options
        from . import units
        from . import signals
        from . import component
        from . import api
        from . import hardware_counters
        from .common import *
        from .libpytimemory import *

        __all__ = ['version_info',
                   'build_info',
                   'version',
                   # --------------- modules ---------------#
                   'libpytimemory',
                   'hardware_counters',
                   'mpi_support',
                   'component',
                   'plotting',
                   'roofline',
                   'bundle',
                   'tests',
                   'util',
                   'api',
                   'ert',
                   'mpi',
                   # --------------- classes ---------------#
                   'manager',
                   'timer',
                   'rss_usage',
                   'auto_timer',
                   'component_list',
                   'component_bundle',
                   # ------------ lib submodules -----------#
                   'units',
                   'options',
                   'signals',
                   'signals.sys_signal',
                   # --------------- functions -------------#
                   'report',
                   'LINE',
                   'FUNC',
                   'FILE',
                   'toggle',
                   'enable',
                   'disable',
                   'is_enabled',
                   'enabled',
                   'enable_signal_detection',
                   'disable_signal_detection',
                   'has_mpi_support',
                   'set_rusage_children',
                   'set_rusage_self',
                   'set_exit_action',
                   'timemory_init',
                   'timemory_finalize',
                   'initialize',
                   'finalize',
                   'mpi_init',
                   'mpi_finalize',
                   ]

        # print("{}".format(sys.argv[:]))
        args = copy.copy(sys.argv)
        while len(args) > 0 and len(args[0]) > 0 and args[0][0] == '-':
            args.pop(0)
        # print("{}".format(args))

        if len(args) == 0:
            args.append("python")

        if os.environ.get("TIMEMORY_LIBRARY_CTOR", True):
            timemory_init(args)

        if os.environ.get("TIMEMORY_LIBRARY_DTOR", True):
            atexit.register(timemory_finalize)

        settings.python_exe = "{}".format(sys.executable)
        settings.command_line = args


    except Exception as e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        traceback.print_exception(exc_type, exc_value, exc_traceback)

        from . import mpi_support
        from . import mpi
        from . import roofline
        from .common import *

        __all__ = ['version_info',
                'build_info',
                'version',
                # --------------- modules ---------------#
                'mpi_support',
                'roofline',
                'mpi',
                # --------------- functions -------------#
                'LINE',
                'FUNC',
                'FILE',
                ]

sys.modules[__name__].__setattr__("version_info", (@TIMEMORY_VERSION_MAJOR@, @TIMEMORY_VERSION_MINOR@, @TIMEMORY_VERSION_PATCH@))
sys.modules[__name__].__setattr__("version", "@TIMEMORY_VERSION@")
sys.modules[__name__].__setattr__("build_info", {"date": "@TIMEMORY_INSTALL_DATE@",
                                                 "library_architecture": "@CMAKE_SYSTEM_PROCESSOR@",
                                                 "system_name": "@CMAKE_SYSTEM_NAME@",
                                                 "system_version": "@CMAKE_SYSTEM_VERSION@",
                                                 "build_type": "@CMAKE_BUILD_TYPE@",
                                                 "compiler": "@CMAKE_CXX_COMPILER@",
                                                 "compiler_id": "@CMAKE_CXX_COMPILER_ID@",
                                                 "compiler_version": "@CMAKE_CXX_COMPILER_VERSION@"
                                                 })

version_info = sys.modules[__name__].__getattribute__("version_info")
'''Tuple of version fields'''

build_info = sys.modules[__name__].__getattribute__("build_info")
'''Build information'''

version = sys.modules[__name__].__getattribute__("version")
'''Version string'''
