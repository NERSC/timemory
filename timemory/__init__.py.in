#!@PYTHON_EXECUTABLE@
# MIT License
#
# Copyright (c) 2018, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from __future__ import absolute_import
import sys
import os
import imp
import ctypes
import platform
import warnings
import importlib
from ctypes.util import find_library

__author__ = "Jonathan Madsen"
__copyright__ = "Copyright 2019, The Regents of the University of California"
__credits__ = ["Jonathan Madsen"]
__license__ = "MIT"
__version__ = "@PROJECT_VERSION@"
__maintainer__ = "Jonathan Madsen"
__email__ = "jonrobm.programming@gmail.com"
__status__ = "Development"

# get the path to this directory
this_path = os.path.abspath(os.path.dirname(__file__))

_tim_pypath = '@TIMEMORY_INSTALL_FULL_PYTHONDIR@'
_tim_libpath = '@TIMEMORY_INSTALL_FULL_LIBDIR@'
_tim_buildpath = '@PROJECT_BINARY_DIR@'

if platform.system() == "Windows":
    _tim_pypath = _tim_pypath.replace("/", "\\")
    _tim_libpath = _tim_libpath.replace("/", "\\")
    _tim_buildpath = _tim_buildpath.replace("/", "\\")

_tim_buildpath = os.path.join(_tim_buildpath, "timemory")

# verbosity
_verbose = 0 if os.environ.get('TIMEMORY_DEBUG') is None \
    else int(os.environ.get('TIMEMORY_DEBUG'))

# construct info dictionary (used for build)
timemory_info_file = os.path.join(this_path, os.path.join("lib", "timemory_pathinfo.txt"))
timemory_info_data = {}
if os.path.exists(timemory_info_file):
    f = open(timemory_info_file, "r")
    data = f.read().splitlines()
    for d in data:
        entry = d.split(" ")
        if len(entry) == 0:
            continue
        elif len(entry) == 2:
            if _verbose > 2:
                print('Adding timemory info data: "{}" = "{}"...'.format(entry[0], entry[1]))
            timemory_info_data[entry[0]] = entry[1]
    f.close()
    if _verbose > 0:
        print('\n### TiMemory info:')
        for key, val in timemory_info_data.items():
            print('\t"{}" : "{}"'.format(key, val))
        print ('')

# if compiled with shared library linking
if "@BUILD_SHARED_LIBS@" == "ON":

    # search for library using {DYLD,LD}_LIBRARY_PATH, LD_RUN_PATH, etc.
    tim_lib_path = find_library("timemory")
    if tim_lib_path is None:
        tim_lib_path = find_library("libtimemory")

    # if not found, go to hard-coded path from installation
    if tim_lib_path is None:
        # when installed, we want to fallback to the installation path first
        # Visual Studio and Xcode put libraries in
        # <LIBRARY_OUTPUT_DIRECTORY>/<CMAKE_BUILD_TYPE> in the build tree
        alt_paths = [ _tim_libpath,
                      os.path.join(this_path, os.path.join("lib", "Debug")),
                      os.path.join(this_path, os.path.join("lib", "MinSizeRel")),
                      os.path.join(this_path, os.path.join("lib", "RelWithDebInfo")),
                      os.path.join(this_path, os.path.join("lib", "Release")),
                      os.path.join(this_path, "lib")
                    ]

        # in the build tree (when testing), we want to fallback to the build path first
        if this_path == _tim_buildpath:
            alt_paths.reverse()

        if _verbose > 2:
            print('find_library("timemory") returned None. Trying fallback paths {}...'.format(alt_paths))

        for alt_path in alt_paths:
            # we found library path in previous iteration
            if tim_lib_path is not None and os.path.exists(tim_lib_path):
                break
            # try to find exact match first, then major version match, then generic
            for _suffix in [ ".@TIMEMORY_VERSION@", ".@TIMEMORY_VERSION_MAJOR@", "" ]:
                _suffix += "@CMAKE_SHARED_LIBRARY_SUFFIX@"
                _test_path = os.path.join(alt_path, "libtimemory{}".format(_suffix))
                if os.path.exists(_test_path):
                    if _verbose > 1:
                        print('Found matching alternative path: "{}"'.format(_test_path))
                    tim_lib_path = _test_path
                    break
                elif _verbose > 1:
                    print('Alternative path not valid: "{}"'.format(_test_path))

        if tim_lib_path is None and "timemory_shared_library" in timemory_info_data.keys():
            tim_lib_path = timemory_info_data["timemory_shared_library"]

    if _verbose > 0:
        print('Using TiMemory shared library: {}'.format(tim_lib_path))

    # open the shared library for RPATH resolution
    lib = None
    try:
        lib = ctypes.CDLL(tim_lib_path, mode=ctypes.RTLD_GLOBAL)
    except Exception as e:
        print('Exception! Error opening TiMemory shared library @ "{}"'.format(tim_lib_path))
        print(e)

from . import libtimemory
from . import plotting
from . import tests
from . import mpi_support
from . import util
from . import options
from . import units
from . import signals
from .libtimemory import *

__all__ = ['version_info',
           'build_info',
           'version',
           # --------------- modules ---------------#
           'libtimemory',
           'mpi_support',
           'plotting',
           'tests',
           'util',
           # --------------- classes ---------------#
           'format',
           'format.rss',
           'format.timer',
           'manager',
           'timer',
           'auto_timer',
           'timer_decorator',
           'rss_usage',
           # ------------ lib submodules -----------#
           'units',
           'options',
           'signals',
           'signals.sys_signal',
           # ------------ lib attributes -----------#
           # 'timing_manager',
           # --------------- functions -------------#
           'report',
           'clear',
           'size',
           'set_exit_action',
           'LINE',                      # 5
           'FUNC',
           'FILE',
           'set_max_depth',
           'get_max_depth',
           'toggle',                    # 10
           'enable',
           'disable',
           'is_enabled',
           'enabled',
           'enable_signal_detection',   # 15
           'disable_signal_detection',
           'set_default_format',
           'get_default_format',
           'has_mpi_support',
           'get_missing_report'         # 20
           ]

sys.modules[__name__].__setattr__("version_info", (@TIMEMORY_VERSION_MAJOR@, @TIMEMORY_VERSION_MINOR@, @TIMEMORY_VERSION_PATCH@))
sys.modules[__name__].__setattr__("version", "@TIMEMORY_VERSION@")
sys.modules[__name__].__setattr__("build_info", {"date" : "@TIMEMORY_INSTALL_DATE@",
                                                 "library_architecture" : "@CMAKE_SYSTEM_PROCESSOR@",
                                                 "system_name" : "@CMAKE_SYSTEM_NAME@",
                                                 "system_version" : "@CMAKE_SYSTEM_VERSION@",
                                                 "build_type" : "@CMAKE_BUILD_TYPE@",
                                                 "compiler" : "@CMAKE_CXX_COMPILER@",
                                                 "compiler_id" : "@CMAKE_CXX_COMPILER_ID@",
                                                 "compiler_version" : "@CMAKE_CXX_COMPILER_VERSION@"
                                                 })

version_info = sys.modules[__name__].__getattribute__("version_info")
'''Tuple of version fields'''

build_info = sys.modules[__name__].__getattribute__("build_info")
'''Build information'''

version = sys.modules[__name__].__getattribute__("version")
'''Version string'''

