# Project Integration

## timemory as a Submodule

Timemory has a permissive MIT license and can be directly included within
another project. C++ projects can take advantage of the header-only feature
of timemory and simply include the folders `source/timemory` and `external/cereal/include`.

## Using CMake

Timemory uses modern CMake INTERFACE targets to include the components you want without
forcing you to include everything -- this means that compiler flags, preprocessor
definitions, include paths, link options, and link libraries are bundled into separate
"library" targets that only need to be "linked" to in CMake.

### Available CMake Targets

These are the full target names available within CMake. These targets are always provided but
may provide an empty target if the underlying specifications (such as a library and include path)
were not available when timemory was installed.

| Target                            | Description                                                       |
| :-------------------------------- | :---------------------------------------------------------------- |
| COMPILED LIBRARIES                |                                                                   |
| `timemory::timemory-cxx-shared`   | C/C++/Fortran library                                             |
| `timemory::timemory-cxx-static`   | C/C++/Fortran library                                             |
| `timemory::timemory-c-shared`     | Minimal C enum interface library (requires `TIMEMORY_BUILD_C=ON`) |
| `timemory::timemory-c-static`     | Minimal C enum interface library (requires `TIMEMORY_BUILD_C=ON`) |
| `timemory::timemory-stubs-shared` | C/C++/Fortran stubs library                                       |
| `timemory::timemory-stubs-static` | C/C++/Fortran stubs library                                       |
| `timemory::timemory-jump-shared`  | C/C++/Fortran jump library                                        |
| `timemory::timemory-jump-static`  | C/C++/Fortran jump library                                        |
| INTERFACE LIBRARIES               |                                                                   |
@TIMEMORY_CMAKE_INTERFACES@

### `find_package` Approach with COMPONENTS

These libraries can be included in a downstream project via the `COMPONENTS` or `OPTIONAL_COMPONENTS` arguments
to the CMake `find_package` command. When the `COMPONENTS` option is used, the default interface target will
be named `timemory`. Alternatively, one can set the `timemory_FIND_COMPONENTS_INTERFACE` variable to define
a custom interface library name.

When targets are listed after the `COMPONENTS` arguments to `find_package`,
the `timemory-` prefix can be omitted. Additionally, the link type (`shared` or `static`) and
languages suffixes (`c`, `cxx`, `cuda`) can be listed once and dropped from subsequent items in the list.

timemory will bundle the targets specified after `COMPONENTS` into one interface library.

```cmake
# create interface target w/ the components
find_package(timemory REQUIRED COMPONENTS cxx shared compile-options)

# create some library
add_library(foo SHARED foo.cpp)

# import all the compiler defs, flags, linked libs, include paths, etc. from above components
target_link_library(foo timemory)

# override the name of INTERFACE library w/ the components
set(timemory_FIND_COMPONENTS_INTERFACE timemory-cuda-extern)

# creates interface library target: timemory-cuda-extern
find_package(timemory REQUIRED COMPONENTS cxx static compile-options cuda cupti)

# create anoter library
add_library(bar STATIC bar.cpp)

# import all the compiler defs, flags, linked libs, include paths, etc. from above components
target_link_library(foo timemory-cuda-extern)
```

```cmake
find_package(timemory REQUIRED COMPONENTS headers cxx-shared)

add_executable(foo foo.cpp)
target_link_libraries(foo PRIVATE timemory)
```

```cmake
set(timemory_FIND_COMPONENTS_INTERFACE timemory::foo-interface)
find_package(timemory REQUIRED COMPONENTS headers OPTIONAL_COMPONENTS arch papi cuda cupti)

add_executable(foo foo.cpp)
target_link_libraries(foo PRIVATE timemory::foo-interface)
```

## Using Makefiles

Timemory generates a `Makefile.timemory.inc` during installation. This file is intended for
projects which rely on Makefiles. In general, each of the above CMake targets
generates `LIBS`, `DEFS`, `INCLUDE`, `CFLAGS`, `CPPFLAGS`, `CUFLAGS`, and `DEPENDS` variables, e.g.
`timemory::timemory-cxx-shared` generates `TIMEMORY_CXX_SHARED_LIBS`, `TIMEMORY_CXX_SHARED_DEFS`,
`TIMEMORY_CXX_SHARED_INCLUDE`, `TIMEMORY_CXX_SHARED_CFLAGS`, `TIMEMORY_CXX_SHARED_CPPFLAGS`.
`TIMEMORY_CXX_SHARED_CUFLAGS`, and `TIMEMORY_CXX_SHARED_DEPENDS`. The `*_DEPENDS` is a list
of the targets which the library depends on.

| Variable     | Description                    |
| ------------ | ------------------------------ |
| `*_DEFS`     | Pre-processor definition flags |
| `*_INCLUDE`  | Include flags                  |
| `*_LIBS`     | Linker flags                   |
| `*_CFLAGS`   | C compiler flags               |
| `*_CPPFLAGS` | C++ compiler flags             |
| `*_CUFLAGS`  | CUDA compiler flags            |
| `*_DEPENDS`  | Internal target dependencies   |

```console
g++ $(TIMEMORY_PAPI_DEFS) $(TIMEMORY_PAPI_INCLUDE) $(TIMEMORY_PAPI_CPPFLAGS) foo.cpp -o foo $(TIMEMORY_PAPI_LIBS)
```
