# timemory Travis CI file

language: python

# The apt packages here install our compiled code dependencies.
matrix:
  include:
    # ------------------------------------------------------------------------ #
    #
    #   Python 3.6
    #
    # ------------------------------------------------------------------------ #
    # GCC 6
    - os: linux
      dist: xenial
      python: "3.6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - build-essential
            - libpapi-dev
            - papi-tools
            - graphviz
            - libgoogle-perftools-dev
            - google-perftools
      env:
        - MATRIX_EVAL="CC=$(which gcc-6) && CXX=$(which g++-6) && BUILD_TYPE=MinSizeRel && BUILD_ARGS='--quick --build-libs static --papi --mpi --ompt --gotcha --caliper --kokkos --stats --tools --cxx-standard=14'"
    # GCC 7
    - os: linux
      dist: bionic
      python: "3.6"
      addons:
        apt:
          packages:
            - gcc
            - g++
            - build-essential
            - libopenmpi-dev
            - openmpi-bin
            - openmpi-common
            - libfabric-dev
            - libpapi-dev
            - papi-tools
            - lcov
            - graphviz
            - libgoogle-perftools-dev
            - google-perftools
      env:
        - MATRIX_EVAL="CC=$(which gcc) && CXX=$(which g++) && BUILD_TYPE=Debug && BUILD_ARGS='--quick --build-libs static --papi --mpi --ompt --kokkos --tools --cxx-standard=14'"
    #
    # GCC 8
    - os: linux
      dist: bionic
      python: "3.6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-8
            - g++-8
            - build-essential
            - libopenmpi-dev
            - openmpi-bin
            - openmpi-common
            - libfabric-dev
            - libpapi-dev
            - papi-tools
            - graphviz
            - libgoogle-perftools-dev
            - google-perftools
      env:
        - MATRIX_EVAL="CC=$(which gcc-8) && CXX=$(which g++-8) && BUILD_ARGS='--build-libs static --mpi --lto --cxx-standard=17'"
    # Clang 5.0
    - os: linux
      dist: xenial
      python: "3.6"
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-5.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-5.0
            - clang++-5.0
            - build-essential
            - libpapi-dev
            - papi-tools
            - graphviz
            - libgoogle-perftools-dev
            - google-perftools
      env:
        - MATRIX_EVAL="CC=$(which clang-5.0) && CXX=$(which clang++-5.0) && BUILD_ARGS='--quick --build-libs static --ompt --kokkos --stats --tools --cxx-standard=14'"
    # Clang 7
    - os: linux
      dist: bionic
      python: "3.6"
      addons:
        apt:
          packages:
            - clang-7
            - clang++-7
            - build-essential
            - libopenmpi-dev
            - openmpi-bin
            - openmpi-common
            - libfabric-dev
            - libpapi-dev
            - papi-tools
            - graphviz
            - libgoogle-perftools-dev
            - google-perftools
      env:
        - MATRIX_EVAL="CC=$(which clang-7) && CXX=$(which clang++-7) && BUILD_ARGS='--quick --build-libs static --caliper --mpi --papi --ompt --stats --tools --cxx-standard=14'"
    # ------------------------------------------------------------------------ #
    #
    #   Python 3.7
    #
    # ------------------------------------------------------------------------ #
    # GCC 6
    - os: linux
      dist: xenial
      python: "3.7"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - graphviz
            - libgoogle-perftools-dev
            - google-perftools
      env:
        - MATRIX_EVAL="CC=$(which gcc-6) && CXX=$(which g++-6) && BUILD_TYPE=MinSizeRel && BUILD_ARGS='--build-libs shared --papi --gotcha --python --kokkos --stats --ipo --cxx-standard=14'"
    # GCC 7
    - os: linux
      dist: bionic
      python: "3.7"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - graphviz
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
      env:
        - MATRIX_EVAL="CC=$(which gcc-7) && CXX=$(which g++-7) && COVERAGE=1 && BUILD_ARGS='--build-libs shared --mpi --papi --caliper --mpip --python --ompt --stats --cxx-standard=17'"
    #
    # GCC 8
    - os: linux
      dist: bionic
      python: "3.7"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-8
            - g++-8
            - build-essential
            - libmpich-dev
            - mpich
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which gcc-8) && CXX=$(which g++-8) && BUILD_TYPE=Release && BUILD_ARGS='--build-libs shared --mpi --python --stats --cxx-standard=17 --ipo --extra-optimizations'"
    # Clang 5.0
    - os: linux
      dist: xenial
      python: "3.7"
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-5.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-5.0
            - clang++-5.0
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - graphviz
            - libgoogle-perftools-dev
            - google-perftools
      env:
        - MATRIX_EVAL="CC=$(which clang-5.0) && CXX=$(which clang++-5.0) && BUILD_ARGS='--build-libs shared --mpi --papi --mpip --ompt --kokkos --stats --tools --cxx-standard=14' && CMAKE_ARGS='-DTIMEMORY_USE_PYTHON=OFF'"
    # Clang 7
    - os: linux
      dist: bionic
      python: "3.7"
      addons:
        apt:
          packages:
            - clang-7
            - clang++-7
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - graphviz
            - libgoogle-perftools-dev
            - google-perftools
      env:
        - MATRIX_EVAL="CC=$(which clang-7) && CXX=$(which clang++-7) && BUILD_ARGS='--quick --build-libs shared --gotcha --caliper --mpi --papi --python --stats --tools --cxx-standard=14'"

    # ------------------------------------------------------------------------ #

before_install:
  - eval "${MATRIX_EVAL}"
  - export CC=${CC}
  - export CXX=${CXX}
  - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
  - bash miniconda.sh -b -p ${HOME}/miniconda
  - export PATH="${HOME}/miniconda/bin:${PATH}"
  - conda config --set always_yes yes --set changeps1 no

install:
  - eval "${MATRIX_EVAL}"
  - env
  - conda create -c defaults -c conda-forge -n pyctest python=${TRAVIS_PYTHON_VERSION} pyctest scikit-build cmake numpy matplotlib pillow pip cython
  - source activate pyctest
  - if [ -n "$(which mpicc)" ]; then python -m pip install mpi4py; fi

script:
  - eval "${MATRIX_EVAL}"
  - export ARGS="-SF --pyctest-model=Continuous --pyctest-site=Travis ${BUILD_ARGS}"
  - if [ -z "${BUILD_TYPE}" ]; then BUILD_TYPE=RelWithDebInfo ; fi
  - if [ -n "${COVERAGE}" ]; then ARGS="${ARGS} --coverage"; else ARGS="${ARGS} --profile=cpu"; fi
  - travis_wait 85 python ./pyctest-runner.py -cc ${CC} -cxx ${CXX} ${ARGS} --pyctest-build-type=${BUILD_TYPE} -j 1 -- -V --output-on-failure -- ${CMAKE_ARGS} -DCMAKE_INSTALL_PREFIX=${HOME}/timemory-install
  - cd build-timemory/Linux
  - make install -j
  - if [ -f "tests/test-python-install-import.cmake" ]; then cmake -P tests/test-python-install-import.cmake; fi
  - echo "Testing is Done"

after_success:
  - eval "${MATRIX_EVAL}"
  # Create lcov report: capture coverage info, filter, debugging, and upload
  - if [ -n "${COVERAGE}" ]; then echo "Capturing coverage..."; lcov --directory . --capture --output-file coverage.info ; fi
  - if [ -n "${COVERAGE}" ]; then echo "Removing some coverage..."; lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' '*/external/*' --output-file coverage.info; fi
  - if [ -n "${COVERAGE}" ]; then echo "Listing coverage..."; lcov --list coverage.info; fi
  - if [ -n "${COVERAGE}" ]; then echo "Submitting coverage..."; bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"; fi
