# TiMEmory Travis CI file

language: python


# The apt packages here install our compiled code dependencies.
matrix:
  include:
    # ------------------------------------------------------------------------ #
    #
    #   Python 3.6
    #
    # ------------------------------------------------------------------------ #
    # GCC 5
    - os: linux
      dist: xenial
      sudo: false
      python: '3.6'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-5
            - g++-5
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which gcc-5) && CXX=$(which g++-5)"
    # GCC 6
    - os: linux
      dist: xenial
      sudo: false
      python: '3.6'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which gcc-6) && CXX=$(which g++-6) && BUILD_TYPE=MinSizeRel"
    # GCC 7
    - os: linux
      dist: xenial
      sudo: false
      python: '3.6'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which gcc-7) && CXX=$(which g++-7)"
    # Clang 4.0
    - os: linux
      dist: xenial
      sudo: false
      python: '3.6'
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-4.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-4.0
            - clang++-4.0
            - build-essential
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which clang-4.0) && CXX=$(which clang++-4.0)"
    # Clang 5.0
    - os: linux
      dist: xenial
      sudo: false
      python: '3.6'
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-5.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-5.0
            - clang++-5.0
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which clang-5.0) && CXX=$(which clang++-5.0)"
    # ------------------------------------------------------------------------ #
    #
    #   Python 3.7
    #
    # ------------------------------------------------------------------------ #
    # GCC 5
    - os: linux
      dist: xenial
      sudo: false
      python: '3.7'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-5
            - g++-5
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which gcc-5) && CXX=$(which g++-5)"
    # GCC 6
    - os: linux
      dist: xenial
      sudo: false
      python: '3.7'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which gcc-6) && CXX=$(which g++-6) && BUILD_TYPE=MinSizeRel"
    # GCC 7
    - os: linux
      dist: xenial
      sudo: false
      python: '3.7'
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which gcc-7) && CXX=$(which g++-7)"
    # Clang 4.0
    - os: linux
      dist: xenial
      sudo: false
      python: '3.7'
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-4.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-4.0
            - clang++-4.0
            - build-essential
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which clang-4.0) && CXX=$(which clang++-4.0)"
    # Clang 5.0
    - os: linux
      dist: xenial
      sudo: false
      python: '3.7'
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-5.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-5.0
            - clang++-5.0
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which clang-5.0) && CXX=$(which clang++-5.0)"
    # ------------------------------------------------------------------------ #

before_install:
    - eval "${MATRIX_EVAL}"
    - export CC=${CC}
    - export CXX=${CXX}
    - export TIMEMORY_VERBOSE=4
    - export TIMEMORY_OUTPUT_TOTAL=1
    - export USE_MPI=$(if [ ! -z "$(which mpicc)" ]; then echo "ON"; else echo "OFF"; fi)
    - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    - bash miniconda.sh -b -p ${HOME}/miniconda
    - export PATH="${HOME}/miniconda/bin:${PATH}"
    - conda config --add channels conda-forge
    - conda config --set always_yes yes --set changeps1 no
    - conda update conda
    - echo "CC = ${CC} $(${CC} -dumpversion)"
    - echo "CXX = ${CXX} $(${CXX} -dumpversion)"
    - echo "Python = $(which python) [version ${PYTHON_VERSION}]"
    - echo "PYBINPATH = ${PYBINPATH}"
    - echo "PYROOTPATH = ${PYROOTPATH}"
    - echo "CMAKE_PREFIX_PATH = ${CMAKE_PREFIX_PATH}"

install:
    - eval "${MATRIX_EVAL}"
    - env
    - conda create -n pyctest python=${TRAVIS_PYTHON_VERSION} pyctest scikit-build cmake numpy matplotlib pillow
    - source activate pyctest
    - export ARGS="-SF --pyctest-model=Continuous --pyctest-site=Travis"
    - if [ -z "${BUILD_TYPE}" ]; then BUILD_TYPE=Release ; fi
    - if [ -z "${USE_MPI}" ]; then ARGS="${ARGS} --no-mpi"; fi
    - travis_wait 15 python ./pyctest-runner.py ${ARGS} --pyctest-build-type=${BUILD_TYPE} -- -VV
    - travis_wait 15 python ./pyctest-runner.py ${ARGS} --pyctest-build-type=RelWithDebInfo --no-py --profile=cpu -- -VV
    - travis_wait 15 python ./pyctest-runner.py ${ARGS} --pyctest-build-type=Debug          --no-py --coverage -- -VV
    # - travis_wait 20 python ./pyctest-runner.py ${ARGS} --pyctest-build-type=RelWithDebInfo --profile=heap

script:
    - python setup.py install -- -DTIMEMORY_BUILD_C=OFF -DTIMEMORY_BUILD_TOOLS=OFF
    - python -c "import timemory; print(timemory.__file__)"
    - echo "python${TRAVIS_PYTHON_VERSION} testing -- Done"

after_success:
    # Create lcov report
    # capture coverage info
    - lcov --directory . --capture --output-file coverage.info
    # filter out system and extra files.
    # To also not include test code in coverage add them with full path to the patterns: '*/tests/*'
    - lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
    # output coverage data for debugging (optional)
    - lcov --list coverage.info
    # Uploading to CodeCov
    # '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
    - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
