# timemory Travis CI file

language: python

# The apt packages here install our compiled code dependencies.
jobs:
  fast_finish: true
  include:
    # ------------------------------------------------------------------------ #
    #
    #   Quick builds
    #
    # ------------------------------------------------------------------------ #
    # GCC 7
    - os: linux
      dist: bionic
      python: "3.7"
      addons:
        apt:
          packages:
            - gcc
            - g++
            - build-essential
      env:
        - CC=gcc
        - CXX=g++
        - BUILD_ARGS='--quick --build-libs shared --tools timem --cxx-standard=17'
    #
    # GCC 8
    - os: linux
      dist: bionic
      python: "3.7"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-8
            - g++-8
            - build-essential
            - libopenmpi-dev
            - openmpi-bin
            - openmpi-common
            - libfabric-dev
      env:
        - CC=gcc-8
        - CXX=g++-8
        - BUILD_ARGS='--quick --build-libs shared static --python --mpi --tools compiler --cxx-standard=17'
    # Clang 6.0
    - os: linux
      dist: xenial
      python: "3.7"
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-6.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-6.0
            - build-essential
      env:
        - CC=clang-6.0
        - CXX=clang++-6.0
        - BUILD_ARGS='--quick --build-libs shared static --stats --tools kokkos-config --cxx-standard=14'
    # Clang 7
    - os: linux
      dist: bionic
      python: "3.7"
      addons:
        apt:
          sources:
            - llvm-toolchain-bionic-7
            - ubuntu-toolchain-r-test
          packages:
            - clang-7
            - build-essential
            - libmpich-dev
            - mpich
      env:
        - CC=clang-7
        - CXX=clang++-7
        - BUILD_ARGS='--quick --build-libs shared static --python --mpi --gotcha --caliper --stats --tools mallocp mpip --cxx-standard=17'
    # ------------------------------------------------------------------------ #
    #
    #   Python 3.6 / Linux
    #
    # ------------------------------------------------------------------------ #
    # GCC 6
    - os: linux
      dist: xenial
      python: "3.6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - build-essential
            - libtbb-dev
      env:
        - CC=gcc-6
        - CXX=g++-6
        - BUILD_TYPE=RelWithDebInfo
        - BUILD_ARGS='--minimal --build-libs shared --python --stats --cxx-standard=14'
    # GCC 7
    - os: linux
      dist: bionic
      python: "3.6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - lcov
      env:
        - CC=gcc-7
        - CXX=g++-7
        - BUILD_ARGS='--minimal --build-libs shared --mpi --papi --caliper --gotcha --tools mpip --stats --cxx-standard=17 --coverage'
    #
    # GCC 8
    - os: linux
      dist: bionic
      python: "3.6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-8
            - g++-8
            - build-essential
            - libopenmpi-dev
            - openmpi-bin
            - openmpi-common
            - libfabric-dev
            - graphviz
            - libgoogle-perftools-dev
            - google-perftools
      env:
        - CC=gcc-8
        - CXX=g++-8
        - BUILD_TYPE=RelWithDebInfo
        - BUILD_ARGS='--build-libs shared --mpi --gperftools --stats --profile=cpu --cxx-standard=17'
    # Clang 6.0
    - os: linux
      dist: xenial
      python: "3.7"
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-6.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-6.0
            - build-essential
      env:
        - CC=clang-6.0
        - CXX=clang++-6.0
        - BUILD_TYPE=MinSizeRel
        - BUILD_ARGS='--minimal --build-libs static --stats --tools timem --cxx-standard=14'
    # Clang 7
    - os: linux
      dist: bionic
      python: "3.7"
      addons:
        apt:
          sources:
            - llvm-toolchain-bionic-7
            - ubuntu-toolchain-r-test
          packages:
            - clang-7
            - build-essential
      env:
        - CC=clang-7
        - CXX=clang++-7
        - BUILD_ARGS='--minimal --build-libs static shared --python --caliper --stats --tools ompt --cxx-standard=14'
    # ------------------------------------------------------------------------ #
    #
    #   Python3.8 / macOS
    #
    # ------------------------------------------------------------------------ #
    - os: osx
      osx_image: xcode11
      language: shell
      env:
        - TRAVIS_PYTHON_VERSION=3.8
        - CONDA_OS=MacOSX
        - CC=clang
        - CXX=clang++
        - CMAKE_ARGS='-DTIMEMORY_BUILD_PYTHON_LINE_PROFILER=OFF'
        - BUILD_ARGS='--minimal --build-libs shared --python --cxx-standard=17'

before_install:
  # only run macOS if a pull-request
  - which -a ${CC}
  - which -a ${CXX}
  - if [ -f /usr/bin/${CC} ]; then export CC=/usr/bin/${CC}; fi
  - if [ -f /usr/bin/${CXX} ]; then export CXX=/usr/bin/${CXX}; fi
  - env
  - export TIMEMORY_SOURCE_DIRECTORY=${PWD}
  # - if [[ "$TRAVIS_PULL_REQUEST" != "false" || "${CONDA_OS}" != "MacOSX" ]]; then EXECUTE=1; else EXECUTE=0; fi;
  - EXECUTE=1
  - if [ -z "${CONDA_OS}" ]; then CONDA_OS=Linux; fi
  - if [ "${EXECUTE}" -ne 0 ]; then wget https://repo.continuum.io/miniconda/Miniconda3-latest-${CONDA_OS}-x86_64.sh -O miniconda.sh; fi
  - if [ "${EXECUTE}" -ne 0 ]; then bash miniconda.sh -b -p ${HOME}/miniconda; fi
  - if [ "${EXECUTE}" -ne 0 ]; then export PATH="${HOME}/miniconda/bin:${PATH}"; fi
  - if [ "${EXECUTE}" -ne 0 ]; then conda config --set always_yes yes --set changeps1 no; fi

install:
  - if [ "${EXECUTE}" -ne 0 ]; then conda create -c defaults -c conda-forge -n pyctest python=${TRAVIS_PYTHON_VERSION} pyctest scikit-build cmake numpy matplotlib pillow pip cython pydot pandas; fi
  - if [ "${EXECUTE}" -ne 0 ]; then source activate pyctest; fi
  - if [ "${EXECUTE}" -ne 0 ]; then if [ -n "$(which mpicc)" ]; then python -m pip install mpi4py; fi; fi

script:
  - if [ -z "${BUILD_TYPE}" ]; then BUILD_TYPE=RelWithDebInfo ; fi
  - export BASE_ARGS="-SF --pyctest-model=Continuous --pyctest-site=Travis -j 1"
  - export CTEST_ARGS="-V --output-on-failure ${CTEST_ARGS}"
  - export CMAKE_ARGS="-DCMAKE_INSTALL_PREFIX=${HOME}/timemory-install ${CMAKE_ARGS}"
  - export PYCTEST_ARGS="${BASE_ARGS} -cc ${CC} -cxx ${CXX} --pyctest-build-type=${BUILD_TYPE} ${BUILD_ARGS}"
  # main command
  - if [ "${EXECUTE}" -ne 0 ]; then
    python ./pyctest-runner.py ${PYCTEST_ARGS} -- ${CTEST_ARGS} -- ${CMAKE_ARGS};
    fi
  # cd into build directory
  - if [ "${EXECUTE}" -ne 0 ]; then
    if [ "${CONDA_OS}" = "Linux" ]; then cd build-timemory/Linux; else cd build-timemory/Darwin; fi;
    fi
  # make install and check that cmake configures from installation and at least one of them builds
  - if [ "${EXECUTE}" -ne 0 ]; then make install -j; cd ${TIMEMORY_SOURCE_DIRECTORY}/examples && mkdir build-examples && cd build-examples; cmake -DTIMEMORY_BUILD_C_EXAMPLES=ON .. && make ex_array_of_bundles; fi
  # if python install test file exists, run it
  - if [ -f "tests/test-python-install-import.cmake" ]; then
    cmake -P tests/test-python-install-import.cmake;
    cd;
    export PYTHON_PATH=${HOME}/timemory-install/lib/python${TRAVIS_PYTHON_VERSION}/site-packages:${PYTHONPATH};
    python${TRAVIS_PYTHON_VERSION} -c "import timemory";
    fi

after_success:
  - echo "Testing is Done"
