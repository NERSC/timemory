# TiMEmory Travis CI file

language: python

# The apt packages here install our compiled code dependencies.
matrix:
  include:
    # ------------------------------------------------------------------------ #
    #
    #   Python 3.6
    #
    # ------------------------------------------------------------------------ #
    # GCC 6
    - os: linux
      dist: xenial
      python: "3.6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which gcc-6) && CXX=$(which g++-6) && BUILD_TYPE=MinSizeRel && BUILD_ARGS='--build-libs static'"
    # GCC 7
    - os: linux
      dist: xenial
      python: "3.6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which gcc-7) && CXX=$(which g++-7) && BUILD_ARGS='--build-libs static --caliper'"
    #
    # GCC 8
    - os: linux
      dist: bionic
      python: "3.6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-8
            - g++-8
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which gcc-8) && CXX=$(which g++-8) && BUILD_ARGS='--build-libs static'"
    # Clang 5.0
    - os: linux
      dist: xenial
      python: "3.6"
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-5.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-5.0
            - clang++-5.0
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which clang-5.0) && CXX=$(which clang++-5.0) && BUILD_ARGS='--build-libs static'"
    # Clang 7
    - os: linux
      dist: bionic
      python: "3.6"
      addons:
        apt:
          packages:
            - clang-7
            - clang++-7
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which clang-7) && CXX=$(which clang++-7) && BUILD_ARGS='--build-libs static --caliper'"
    # ------------------------------------------------------------------------ #
    #
    #   Python 3.7
    #
    # ------------------------------------------------------------------------ #
    # GCC 6
    - os: linux
      dist: xenial
      python: "3.7"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which gcc-6) && CXX=$(which g++-6) && BUILD_TYPE=MinSizeRel && BUILD_ARGS='--build-libs shared --gotcha'"
    #
    # GCC 8
    - os: linux
      dist: bionic
      python: "3.7"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-8
            - g++-8
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which gcc-8) && CXX=$(which g++-8) && BUILD_ARGS='--build-libs shared'"
    # Clang 5.0
    - os: linux
      dist: xenial
      python: "3.7"
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-5.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-5.0
            - clang++-5.0
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which clang-5.0) && CXX=$(which clang++-5.0) && COVERAGE=1 && BUILD_ARGS='--build-libs shared'"
    # Clang 7
    - os: linux
      dist: bionic
      python: "3.7"
      addons:
        apt:
          packages:
            - clang-7
            - clang++-7
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - libgoogle-perftools-dev
            - google-perftools
            - lcov
            - graphviz
      env:
        - MATRIX_EVAL="CC=$(which clang-7) && CXX=$(which clang++-7) && BUILD_ARGS='--build-libs shared --gotcha --caliper'"

    # ------------------------------------------------------------------------ #

before_install:
  - eval "${MATRIX_EVAL}"
  - export CC=${CC}
  - export CXX=${CXX}
  - export TIMEMORY_VERBOSE=4
  - export TIMEMORY_OUTPUT_TOTAL=1
  - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
  - bash miniconda.sh -b -p ${HOME}/miniconda
  - export PATH="${HOME}/miniconda/bin:${PATH}"
  - conda config --set always_yes yes --set changeps1 no

install:
  - eval "${MATRIX_EVAL}"
  - env
  - conda create -c defaults -c conda-forge -n pyctest python=${TRAVIS_PYTHON_VERSION} pyctest scikit-build cmake numpy matplotlib pillow gperftools
  - source activate pyctest
  # - python setup.py install --build-type=Debug -- -DTIMEMORY_BUILD_C=OFF -DTIMEMORY_BUILD_TOOLS=OFF -DBUILD_STATIC_LIBS=OFF -DTIMEMORY_USE_CALIPER=ON -DTIMEMORY_USE_GOTCHA=ON -- -j2
  - export ARGS="-SF --pyctest-model=Continuous --pyctest-site=Travis --no-mpi ${BUILD_ARGS}"
  - if [ -z "${BUILD_TYPE}" ]; then BUILD_TYPE=RelWithDebInfo ; fi
  - if [ -z "${USE_MPI}" ]; then ARGS="${ARGS} --no-mpi"; fi
  - if [ -n "${COVERAGE}" ]; then ARGS="${ARGS} --coverage"; else ARGS="${ARGS} --profile=cpu"; fi
  - travis_wait 75 python ./pyctest-runner.py ${ARGS} --pyctest-build-type=${BUILD_TYPE} -- -VV

script:
  - eval "${MATRIX_EVAL}"
  # - python -c "import timemory; print(timemory.__file__)"
  - echo "Testing is Done"

after_success:
  - eval "${MATRIX_EVAL}"
  - SUBMIT_COVERAGE=0
  - if [ -n "${COVERAGE}" ]; then SUBMIT_COVERAGE=1; fi
  # Create lcov report: capture coverage info, filter, debugging, and upload
  - if [ "${SUBMIT_COVERAGE}" -gt 0 ]; then lcov --directory . --capture --output-file coverage.info ; fi
  - if [ "${SUBMIT_COVERAGE}" -gt 0 ]; then lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' '*/external/*' --output-file coverage.info; fi
  - if [ "${SUBMIT_COVERAGE}" -gt 0 ]; then lcov --list coverage.info; fi
  - if [ "${SUBMIT_COVERAGE}" -gt 0 ]; then bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"; fi
