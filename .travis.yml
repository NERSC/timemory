# timemory Travis CI file

language: python

# The apt packages here install our compiled code dependencies.
jobs:
  fast_finish: true
  include:
    # ------------------------------------------------------------------------ #
    #
    #   Python 3.8 / macOS
    #
    # ------------------------------------------------------------------------ #
    - os: osx
      osx_image: xcode12u
      language: generic
      # addons:
      #  homebrew:
      #    casks:
      #    - anaconda
      #    update: true
      env:
        - TRAVIS_PYTHON_VERSION=3.8
        - CONDA_OS=MacOSX
        - CC=clang
        - CXX=clang++
        - CMAKE_ARGS='-DTIMEMORY_BUILD_PYTHON_HATCHET=OFF'
        - BUILD_ARGS='--quick --build-libs shared --python --cxx-standard=17'
    # ------------------------------------------------------------------------ #
    #
    #   Python 3.6 / Python 3.7 / Linux
    #
    # ------------------------------------------------------------------------ #
    # Clang 7
    - os: linux
      dist: bionic
      python: "3.7"
      addons:
        apt:
          sources:
            - llvm-toolchain-bionic-7
            - ubuntu-toolchain-r-test
          packages:
            - clang-7
            - build-essential
            - libmpich-dev
            - mpich
      env:
        - CC=clang-7
        - CXX=clang++-7
        - BUILD_ARGS='--minimal --build-libs shared static --python --mpi --gotcha --stats --tools mallocp mpip ompt --cxx-standard=17'
    # Clang 8.0
    - os: linux
      dist: bionic
      python: "3.7"
      addons:
        apt:
          sources:
            - llvm-toolchain-bionic-8
            - ubuntu-toolchain-r-test
          packages:
            - clang-8
            - build-essential
      env:
        - CC=clang-8
        - CXX=clang++-8
        - BUILD_ARGS='--minimal --build-libs shared static --stats --tools kokkos-config timem --cxx-standard=14'
    # GCC 6
    - os: linux
      dist: xenial
      python: "3.6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - build-essential
            - libtbb-dev
      env:
        - CC=gcc-6
        - CXX=g++-6
        - BUILD_TYPE=RelWithDebInfo
        - BUILD_ARGS='--minimal --build-libs shared --python --stats --cxx-standard=14'
    # GCC 7
    - os: linux
      dist: bionic
      python: "3.6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - build-essential
            - libmpich-dev
            - mpich
            - libpapi-dev
            - papi-tools
            - lcov
      env:
        - CC=gcc-7
        - CXX=g++-7
        - BUILD_ARGS='--minimal --build-libs shared --mpi --papi --gotcha --tools mpip --stats --cxx-standard=17 --coverage'
    #
    # GCC 8
    - os: linux
      dist: bionic
      python: "3.6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-8
            - g++-8
            - build-essential
            - libopenmpi-dev
            - openmpi-bin
            - openmpi-common
            - libfabric-dev
      env:
        - CC=gcc-8
        - CXX=g++-8
        - BUILD_TYPE=RelWithDebInfo
        - BUILD_ARGS='--minimal --build-libs shared --mpi --stats --tools compiler --cxx-standard=17'

before_install:
  # - if [ -d /Library/Developer ]; then sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/* ; fi
  - which -a ${CC}
  - which -a ${CXX}
  - if [ -f /usr/bin/${CC} ]; then export CC=/usr/bin/${CC}; fi
  - if [ -f /usr/bin/${CXX} ]; then export CXX=/usr/bin/${CXX}; fi
  - if [ -d /usr/local/anaconda3/bin ]; then export PATH=/usr/local/anaconda3/bin:$PATH ; fi
  - env
  - export TIMEMORY_SOURCE_DIRECTORY=${PWD}
  - if [ -z "${CONDA_OS}" ]; then CONDA_OS=Linux; fi
  - if [ -z "$(which conda)" ]; then
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-${CONDA_OS}-x86_64.sh -O miniconda.sh;
      bash miniconda.sh -b -p ${HOME}/miniconda;
      export PATH="${HOME}/miniconda/bin:${PATH}";
    fi;
    conda config --set always_yes yes --set changeps1 no

install:
  - conda create -c conda-forge -c defaults -n pyctest python=${TRAVIS_PYTHON_VERSION} pyctest scikit-build cmake pip
  - source activate
  - conda activate pyctest
  - python -m pip install -r requirements.txt
  - if [ -n "$(which mpicc)" ]; then
      python -m pip install mpi4py;
    fi

script:
  - if [ -z "${BUILD_TYPE}" ]; then BUILD_TYPE=RelWithDebInfo; fi
  - export BASE_ARGS="-SF --pyctest-model=Continuous --pyctest-site=Travis -j 1"
  - export CTEST_ARGS="-V --output-on-failure ${CTEST_ARGS}"
  - export CMAKE_ARGS="-DCMAKE_INSTALL_PREFIX=${HOME}/timemory-install ${CMAKE_ARGS}"
  - export PYCTEST_ARGS="${BASE_ARGS} -cc ${CC} -cxx ${CXX} --pyctest-build-type=${BUILD_TYPE} ${BUILD_ARGS}"
  # main command
  - python ./pyctest-runner.py ${PYCTEST_ARGS} -- ${CTEST_ARGS} -- ${CMAKE_ARGS}
  # cd into build directory
  - if [ "${CONDA_OS}" = "Linux" ]; then
      cd build-timemory/Linux;
    else
      cd build-timemory/Darwin;
    fi
  # make install and check that cmake configures from installation and at least one of them builds
  - make install -j
  # if python install test file exists, run it
  - if [ -f "tests/test-python-install-import.cmake" ]; then
      cmake -P tests/test-python-install-import.cmake;
      cd;
      export PYTHON_PATH=${HOME}/timemory-install/lib/python${TRAVIS_PYTHON_VERSION}/site-packages:${PYTHONPATH};
      python${TRAVIS_PYTHON_VERSION} -c "import timemory";
    fi
  - cd ${TIMEMORY_SOURCE_DIRECTORY}/examples && mkdir build-examples && cd build-examples
  - cmake -DTIMEMORY_BUILD_C_EXAMPLES=ON .. && make ex_array_of_bundles

after_success:
  - echo "Testing is Done"
