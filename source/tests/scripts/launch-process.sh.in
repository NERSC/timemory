#!/bin/bash -e
#
# NOTE: Applications built with MPI may abort when launched via @PROJECT_BINARY_DIR@/timemory-run
#
source $(dirname $(basename ${BASH_SOURCE[0]}))/common.sh

TEST_NAME=$(basename ${BASH_SOURCE[0]})

export TIMEMORY_OUTPUT_PATH=@CMAKE_CURRENT_BINARY_DIR@/dynamic/timemory-@TEST_NAME@-output
export TIMEMORY_OUTPUT_PREFIX="launch-process"
export TIMEMORY_TEXT_OUTPUT=ON
export TIMEMORY_FILE_OUTPUT=ON
export TIMEMORY_AUTO_OUTPUT=ON
export TIMEMORY_TREE_OUTPUT=OFF
export TIMEMORY_JSON_OUTPUT=OFF
export TIMEMORY_COUT_OUTPUT=ON
export TIMEMORY_FLAMEGRAPH_OUTPUT=OFF

rm -rf ${TIMEMORY_OUTPUT_PATH}

# append directories to path
export PATH=@CMAKE_CURRENT_BINARY_DIR@:@PROJECT_BINARY_DIR@:${PATH}
# add path to libtimemory to LD_LIBRARY_PATH
export LD_LIBRARY_PATH=@PROJECT_BINARY_DIR@:${LD_LIBRARY_PATH}

emit-separator "Performing runtime instrumentation"

# launch
timemory-run --label args return -v 1 -ME '(^libm|^libc|^libz|^libicu|^liblzma|^libxml|\.c$)' -- @COMMAND@

emit-separator "Analyzing results in ${TIMEMORY_OUTPUT_PATH}"

find ${TIMEMORY_OUTPUT_PATH}

WALL_FILE="${TIMEMORY_OUTPUT_PATH}/${TIMEMORY_OUTPUT_PREFIX}-wall.txt"

echo "WALL_FILE: ${WALL_FILE}"

if [ ! -f "${WALL_FILE}" ]; then
    echo -e "Missing wall-clock output file: \"${WALL_FILE}\""
    echo -e "File in ${TIMEMORY_OUTPUT_PATH}:\n$(ls ${TIMEMORY_OUTPUT_PATH})"
    exit 1
else
    NWALL=$(count-lines ${WALL_FILE})
    if [ "${NWALL}" -eq 0 ]; then
        echo -e "\nWall-clock results from \"${WALL_FILE}\" were empty:\n"
        echo -e "$(cat ${WALL_FILE} | grep '>>>')"
        exit 1
    fi
    NCONSUME=$(cat ${WALL_FILE} | grep 'details::consume(' | wc -l)
    CCONSUME=$(cat ${WALL_FILE} | grep 'details::consume(')
    if [ "${NCONSUME}" -lt 1 ]; then
        echo -e "\nMissing 'details::consume' function w/ arguments in \"${WALL_FILE}\":\n"
        echo -e "$(cat ${WALL_FILE})"
        echo -e "\nShould contain something similar to:\n"
        echo -e "| >>>   |_long int details::consume(long int)"
        exit 1
    fi

fi
