
#include <cassert>
#include <cstdlib>
#include <execinfo.h>
#include <iostream>
#include <string>
#include <vector>

#include "timemory/runtime/configure.hpp"
#include "timemory/timemory.hpp"

#include "kp_timemory.hpp"

#if __cplusplus > 201402L  // C++17
#    define if_constexpr if constexpr
#else
#    define if_constexpr if
#endif

static std::string spacer =
    "#---------------------------------------------------------------------------#";

// this just differentiates Kokkos from other user_bundles
struct KokkosProfiler;
using KokkosUserBundle = tim::component::user_bundle<0, KokkosProfiler>;

// set up the configuration of tools
using namespace tim::component;
// clang-format off
using profile_entry_t = tim::component_tuple<@KP_COMPONENTS@>;
// clang-format on

// various data structurs used
using section_entry_t = std::tuple<std::string, profile_entry_t>;
using profile_stack_t = std::vector<profile_entry_t>;
using profile_map_t   = std::unordered_map<uint64_t, profile_entry_t>;
using section_map_t   = std::unordered_map<uint64_t, section_entry_t>;

//--------------------------------------------------------------------------------------//

extern "C"
{
    TIMEMORY_WEAK_PREFIX
    void timemory_mpip_library_ctor() TIMEMORY_WEAK_POSTFIX
        TIMEMORY_VISIBILITY("default");
    TIMEMORY_WEAK_PREFIX
    void timemory_ompt_library_ctor() TIMEMORY_WEAK_POSTFIX
        TIMEMORY_VISIBILITY("default");

    void timemory_mpip_library_ctor() {}
    void timemory_ompt_library_ctor() {}
}

//--------------------------------------------------------------------------------------//

static uint64_t
get_unique_id()
{
    static thread_local uint64_t _instance = 0;
    return _instance++;
}

//--------------------------------------------------------------------------------------//

template <typename Tp>
Tp&
get_tl_static()
{
    static thread_local Tp _instance;
    return _instance;
}

//--------------------------------------------------------------------------------------//

static profile_map_t&
get_profile_map()
{
    return get_tl_static<profile_map_t>();
}

//--------------------------------------------------------------------------------------//

static profile_stack_t&
get_profile_stack()
{
    return get_tl_static<profile_stack_t>();
}

//--------------------------------------------------------------------------------------//

static void
create_profiler(const std::string& pname, uint64_t kernid)
{
    get_profile_map().insert(std::make_pair(kernid, profile_entry_t(pname, true)));
}

//--------------------------------------------------------------------------------------//

static void
destroy_profiler(uint64_t kernid)
{
    if(get_profile_map().find(kernid) != get_profile_map().end())
        get_profile_map().erase(kernid);
}

//--------------------------------------------------------------------------------------//

static void
start_profiler(uint64_t kernid)
{
    if(get_profile_map().find(kernid) != get_profile_map().end())
        get_profile_map().at(kernid).start();
}

//--------------------------------------------------------------------------------------//

static void
stop_profiler(uint64_t kernid)
{
    if(get_profile_map().find(kernid) != get_profile_map().end())
        get_profile_map().at(kernid).stop();
}

//--------------------------------------------------------------------------------------//
//  call this function if KokkosUserBundle is listed as one of the tools
//  (long compile times)
//
template <typename TupleT,
          enable_if_t<(tim::is_one_of<KokkosUserBundle, TupleT>::value), int> = 0>
static void
configure(const std::vector<TIMEMORY_COMPONENT>& components)
{
    tim::configure<KokkosUserBundle>(components);
}

//--------------------------------------------------------------------------------------//
//  call this function if KokkosUserBundle is NOT listed as one of the tools
//  (drastically reduces compile times)
//
template <typename TupleT,
          enable_if_t<!(tim::is_one_of<KokkosUserBundle, TupleT>::value), int> = 0>
static void
configure(const std::vector<TIMEMORY_COMPONENT>&)
{}

//======================================================================================//
//
//      Kokkos symbols
//
//======================================================================================//

extern "C" void
kokkosp_init_library(const int loadSeq, const uint64_t interfaceVer,
                     const uint32_t devInfoCount, void* deviceInfo)
{
    timemory_mpip_library_ctor();
    timemory_ompt_library_ctor();

    printf("%s\n", spacer.c_str());
    printf("# KokkosP: timemory Connector (sequence is %d, version: %llu)\n", loadSeq,
           (unsigned long long) interfaceVer);
    printf("%s\n\n", spacer.c_str());

    // timemory_init is expecting some args so generate some
    auto  dir  = TIMEMORY_JOIN("_", loadSeq, interfaceVer, devInfoCount);
    char* cstr = strdup(dir.c_str());
    tim::timemory_init(1, &cstr);
    free(cstr);
}

extern "C" void
kokkosp_finalize_library()
{
    printf("\n%s\n", spacer.c_str());
    printf("KokkosP: Finalization of timemory Connector. Complete.\n");
    printf("%s\n\n", spacer.c_str());

    for(auto& itr : get_profile_map())
        itr.second.stop();
    get_profile_map().clear();

    tim::timemory_finalize();
}

//--------------------------------------------------------------------------------------//

extern "C" void
kokkosp_begin_parallel_for(const char* name, uint32_t devid, uint64_t* kernid)
{
    if_constexpr(profile_entry_t::size() > 0)
    {
        auto pname = TIMEMORY_JOIN("/", "kokkos", TIMEMORY_JOIN("", "dev", devid), name);
        *kernid    = get_unique_id();
        create_profiler(pname, *kernid);
        start_profiler(*kernid);
    }
}

extern "C" void
kokkosp_end_parallel_for(uint64_t kernid)
{
    if_constexpr(profile_entry_t::size() > 0)
    {
        stop_profiler(kernid);
        destroy_profiler(kernid);
    }
}

//--------------------------------------------------------------------------------------//

extern "C" void
kokkosp_begin_parallel_reduce(const char* name, uint32_t devid, uint64_t* kernid)
{
    if_constexpr(profile_entry_t::size() > 0)
    {
        auto pname = TIMEMORY_JOIN("/", "kokkos", TIMEMORY_JOIN("", "dev", devid), name);
        *kernid    = get_unique_id();
        create_profiler(pname, *kernid);
        start_profiler(*kernid);
    }
}

extern "C" void
kokkosp_end_parallel_reduce(uint64_t kernid)
{
    if_constexpr(profile_entry_t::size() > 0)
    {
        stop_profiler(kernid);
        destroy_profiler(kernid);
    }
}

//--------------------------------------------------------------------------------------//

extern "C" void
kokkosp_begin_parallel_scan(const char* name, uint32_t devid, uint64_t* kernid)
{
    if_constexpr(profile_entry_t::size() > 0)
    {
        auto pname = TIMEMORY_JOIN("/", "kokkos", TIMEMORY_JOIN("", "dev", devid), name);
        *kernid    = get_unique_id();
        create_profiler(pname, *kernid);
        start_profiler(*kernid);
    }
}

extern "C" void
kokkosp_end_parallel_scan(uint64_t kernid)
{
    if_constexpr(profile_entry_t::size() > 0)
    {
        stop_profiler(kernid);
        destroy_profiler(kernid);
    }
}

//--------------------------------------------------------------------------------------//

extern "C" void
kokkosp_push_profile_region(const char* name)
{
    if_constexpr(profile_entry_t::size() > 0)
    {
        get_profile_stack().push_back(profile_entry_t(name, true));
        get_profile_stack().back().start();
    }
}

extern "C" void
kokkosp_pop_profile_region()
{
    if_constexpr(profile_entry_t::size() > 0)
    {
        if(get_profile_stack().empty())
            return;
        get_profile_stack().back().stop();
        get_profile_stack().pop_back();
    }
}

//--------------------------------------------------------------------------------------//

extern "C" void
kokkosp_create_profile_section(const char* name, uint32_t* secid)
{
    if_constexpr(profile_entry_t::size() > 0)
    {
        *secid = get_unique_id();
        auto pname =
            TIMEMORY_JOIN("/", "kokkos", TIMEMORY_JOIN("", "section", secid), name);
        create_profiler(pname, *secid);
    }
}

extern "C" void
kokkosp_destroy_profile_section(uint32_t secid)
{
    if_constexpr(profile_entry_t::size() > 0) { destroy_profiler(secid); }
}

//--------------------------------------------------------------------------------------//

extern "C" void
kokkosp_start_profile_section(uint32_t secid)
{
    if_constexpr(profile_entry_t::size() > 0) { start_profiler(secid); }
}

extern "C" void
kokkosp_stop_profile_section(uint32_t secid)
{
    if_constexpr(profile_entry_t::size() > 0) { start_profiler(secid); }
}

//--------------------------------------------------------------------------------------//
